[{"path":"https://metaRange.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Fallert. Author, maintainer, copyright holder. Lea Li. Author, copyright holder.            Contributed first implementation metabolic scaling Juliano S. Cabral. Author, copyright holder, thesis advisor. Tyler Morgan-Wall. Contributor, copyright holder. Bavarian Ministry Science Arts (bayklif). Funder. Deutsche Bundesstiftung Umwelt (DBU). Funder.","code":""},{"path":"https://metaRange.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fallert S, Li L, S. Cabral J (2023). metaRange: Mechanistic Metabolic Constrained Species Distribution Model. R package version 0.0.0.9000, https://metaRange.github.io.","code":"@Manual{,   title = {metaRange: Mechanistic and Metabolic Constrained Species Distribution Model},   author = {Stefan Fallert and Lea Li and Juliano {S. Cabral}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://metaRange.github.io}, }"},{"path":"https://metaRange.github.io/index.html","id":"metarange","dir":"","previous_headings":"","what":"Mechanistic and Metabolic Constrained Species Distribution Model","title":"Mechanistic and Metabolic Constrained Species Distribution Model","text":"metaRange collection functions allow build process based species distribution model can include (basically) arbitrary number environmental factors, processes, species species interactions. common denominator models build metaRange grid population (.e. individual) based.","code":""},{"path":"https://metaRange.github.io/index.html","id":"for-users","dir":"","previous_headings":"","what":"For users:","title":"Mechanistic and Metabolic Constrained Species Distribution Model","text":"Install :","code":"# CRAN / stable version # install.packages(\"metaRange\") # Note: not yet on CRAN  # github / development version devtools::install_github(\"metaRange/metaRange\")"},{"path":"https://metaRange.github.io/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Mechanistic and Metabolic Constrained Species Distribution Model","text":"Every simulated species consists set processes functions describe ’s relationship time, , abiotic environment species. Additional processes species described traits, can type data can basis changed processes. species consists populations, occupies one grid cell landscape. processes species executed timestep, population landscape, based user defined priority (.e. user can choose process species executed time sequence/ simulation time step) simple example species process reproduction describes species reproduces one simulation time step. process example depend : temperature environment, presence species (e.g. food source), current population density species reproduction rate species. process therefore likely influence abundance trait species (form grid/ raster abundance value population). Note neither reproduction abundance automatically created defined user. Note model build using R6 system, means feature syntax slightly different base R functions. one unfamiliar “classic” object-oriented programming, might advisable read short intro R6 package even chapter Hadley Wickham’s “Advanced R”.","code":""},{"path":"https://metaRange.github.io/index.html","id":"for-developers-interested-in-changing-the-package-itself","dir":"","previous_headings":"","what":"For developers interested in changing the package itself:","title":"Mechanistic and Metabolic Constrained Species Distribution Model","text":"Note package includes C++ code. build , need functioning compiler toolchain (RTools windows). quick workflow make sure nothing breaks making changes: Copyright (C) 2023 metaRange authors License: GPL-3","code":"library(here) library(terra) styler::style_pkg(     scope = \"line_breaks\",     strict = TRUE,     indent_by = 4L ) Rcpp::compileAttributes() roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'), clean = TRUE) # or: devtools::document() library(tinytest) devtools::load_all()  # Enable extensive reporting from metaRange functions when testing set_verbosity(2)  # quick tests; suitable for CRAN and the CI tinytest::test_all()  # extensive tests; suitable for local testing tinytest::test_all(testdir = \"inst/local\")  # and lastly the R CMD check devtools::check()"},{"path":"https://metaRange.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://metaRange.github.io/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://metaRange.github.io/reference/calculate_dispersal_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"Use user defined function create 2D dispersal kernel.","code":""},{"path":"https://metaRange.github.io/reference/calculate_dispersal_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"","code":"calculate_dispersal_kernel(max_dispersal_dist, kfun, ...)"},{"path":"https://metaRange.github.io/reference/calculate_dispersal_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"max_dispersal_dist <numeric> maximum dispersal distance. kfun <function> kernel function use. Can user-defined, case needs accept (least) parameter \"x\" representing distance source input return probability. ... additional parameters passed kernel function.","code":""},{"path":"https://metaRange.github.io/reference/calculate_dispersal_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"Dispersal kernel probabilities.","code":""},{"path":"https://metaRange.github.io/reference/calculate_dispersal_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"","code":"calculate_dispersal_kernel(     max_dispersal_dist = 3,     kfun = negative_exponential_function,     mean_dispersal_dist = 1 ) #>              [,1]         [,2]         [,3]        [,4]         [,5] #> [1,] 0.0001038990 0.0003715183 0.0009015769 0.001247255 0.0009015769 #> [2,] 0.0003715183 0.0017578494 0.0057477554 0.009216039 0.0057477554 #> [3,] 0.0009015769 0.0057477554 0.0297407523 0.068097831 0.0297407523 #> [4,] 0.0012472553 0.0092160392 0.0680978308 0.503178692 0.0680978308 #> [5,] 0.0009015769 0.0057477554 0.0297407523 0.068097831 0.0297407523 #> [6,] 0.0003715183 0.0017578494 0.0057477554 0.009216039 0.0057477554 #> [7,] 0.0001038990 0.0003715183 0.0009015769 0.001247255 0.0009015769 #>              [,6]         [,7] #> [1,] 0.0003715183 0.0001038990 #> [2,] 0.0017578494 0.0003715183 #> [3,] 0.0057477554 0.0009015769 #> [4,] 0.0092160392 0.0012472553 #> [5,] 0.0057477554 0.0009015769 #> [6,] 0.0017578494 0.0003715183 #> [7,] 0.0003715183 0.0001038990"},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization constant calculation — calculate_normalization_constant","title":"Normalization constant calculation — calculate_normalization_constant","text":"Calculates normalization constant metabolic scaling based known estimated parameter value reference temperature.","code":""},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization constant calculation — calculate_normalization_constant","text":"","code":"calculate_normalization_constant(   parameter_value,   scaling_exponent,   mass,   reference_temperature,   E = NULL,   k = 8.617333e-05 )"},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization constant calculation — calculate_normalization_constant","text":"parameter_value <numeric> parameter value reference temperature. scaling_exponent <numeric> allometric scaling exponent mass. mass <numeric>  mean (individual) mass. reference_temperature <numeric> reference temperature kelvin (K). E <numeric> Activation energy electronvolts (eV). k <numeric> Boltzmann's constant (eV / K).","code":""},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization constant calculation — calculate_normalization_constant","text":"calculated normalization constant.","code":""},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalization constant calculation — calculate_normalization_constant","text":"Note different scaling values different parameter. following summary table 4 Brown, Sibly Kodric-Brown (2012) (see references).","code":""},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalization constant calculation — calculate_normalization_constant","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004) Toward Metabolic Theory Ecology. Ecology, 85 1771--1789. doi:10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012) Introduction: Metabolism Basis Theoretical Unification Ecology. Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown) doi:10.1002/9781119968535.ch","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/calculate_normalization_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalization constant calculation — calculate_normalization_constant","text":"","code":"calculate_normalization_constant(     parameter_value = 1,     scaling_exponent = -1 / 4,     mass = 1,     reference_temperature = 273.15,     E = -0.65 ) #> [1] 983745454953"},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate (estimate) environmental suitability — calculate_suitability","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"Calculate / estimate environmental suitability given environmental value, based beta distribution, using three \"cardinal\" values species environmental niche.","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"","code":"calculate_suitability(vmax, vopt, vmin, venv)"},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"vmax <numeric> upper (.e. maximum) tolerable value vopt <numeric> optimal (.e. preferred) value vmin <numeric> lower (.e. minimum) tolerable value venv <numeric> environmental value calculate suitability","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"<numeric> environmental suitability","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"environmental suitability calculated based beta distribution formula provided Yin et al. (1995) simplified Yan Hunt (1999) (see references paragraph) $$suitability = (\\frac{V_{max} - V_{env}}{V_{max} - V_{opt}}) * (\\frac{V_{env} - V_{min}}{V_{opt} - V_{min}})^{\\frac{V_{opt} - V_{min}}{V_{max} - V_{opt}}}$$","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"original formula Yin et al. intended calculate relative daily growth rate plants relation temperature. abstraction use ) calculate niche suitability; B) use environmental values temperature might valid. However, assumption environmental suitability one niche dimension highest one optimal value decreases towards tolerable minimum maximum values nonlinear fashion seems reasonable.","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"Yin, X., Kropff, M.J., McLaren, G., Visperas, R.M., (1995) nonlinear model crop development function temperature, Agricultural Forest Meteorology, Volume 77, Issues 1–2, Pages 1--16, doi:10.1016/0168-1923(95)02236-Q Also, see equation 4 : Weikai Yan, L.. Hunt, (1999) Equation Modelling Temperature Response Plants using Cardinal Temperatures, Annals Botany, Volume 84, Issue 5, Pages 607--614, ISSN 0305-7364, doi:10.1006/anbo.1999.0955","code":""},{"path":"https://metaRange.github.io/reference/calculate_suitability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"","code":"calculate_suitability(     vmax = 30,     vopt = 25,     vmin = 10,     venv = 0:40 ) #>  [1] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [7] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.001125926 #> [13] 0.008533333 0.027200000 0.060681481 0.111111111 0.179200000 0.264237037 #> [19] 0.364088889 0.475200000 0.592592593 0.709866667 0.819200000 0.911348148 #> [25] 0.975644444 1.000000000 0.970903704 0.873422222 0.691200000 0.406459259 #> [31] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #> [37] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000"},{"path":"https://metaRange.github.io/reference/create_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simulation — create_simulation","title":"Create a simulation — create_simulation","text":"Creates metaRangeSimulation object. convenience wrapper metaRangeSimulation$new().","code":""},{"path":"https://metaRange.github.io/reference/create_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simulation — create_simulation","text":"","code":"create_simulation(source_environment, ID = NULL, seed = NULL)"},{"path":"https://metaRange.github.io/reference/create_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simulation — create_simulation","text":"source_environment <SpatRasterDataset> created terra::sds() represents environment. individual data sets represent different environmental variables (e.g. temperature habitat availability) different layer data sets represent different timesteps simulation. function metaRangeSimulation$set_time_layer_mapping() can used extend/ shorten simulation timesteps set mapping time step corresponding environmental layer. can used e.g. repeat first () layer burn-period. number layers must data sets. ID <string> optional simulation identification string. set automatically none specified. seed <integer> optional seed random number generator. set automatically none specified.","code":""},{"path":"https://metaRange.github.io/reference/create_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simulation — create_simulation","text":"metaRangeSimulation object","code":""},{"path":"https://metaRange.github.io/reference/create_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simulation — create_simulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- create_simulation(sim_env)"},{"path":"https://metaRange.github.io/reference/dispersal.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispersal process — dispersal","title":"Dispersal process — dispersal","text":"Disperse (abundance) matrix using dispersal kernel optional weights.","code":""},{"path":"https://metaRange.github.io/reference/dispersal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispersal process — dispersal","text":"","code":"dispersal(dispersal_kernel, abundance, weights)"},{"path":"https://metaRange.github.io/reference/dispersal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispersal process — dispersal","text":"dispersal_kernel <matrix> dispersal kernel. abundance <matrix> abundance matrix. weights <matrix>  optional weights form matrix dimensions abundance range: 0, 1.","code":""},{"path":"https://metaRange.github.io/reference/dispersal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispersal process — dispersal","text":"<matrix> Dispersed abundance matrix.","code":""},{"path":"https://metaRange.github.io/reference/dispersal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dispersal process — dispersal","text":"abundance matrix dispersed using dispersal kernel. matrix weights supplied, individuals redistribute within dispersal kernel according weights. means individuals move towards areas higher weight, can reach .","code":""},{"path":"https://metaRange.github.io/reference/dispersal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dispersal process — dispersal","text":"","code":"n <- 10 n2 <- n^2 abu <- matrix(1:n2, nrow = n, ncol = n) suitab <- matrix(1, nrow = n, ncol = n) kernel <- calculate_dispersal_kernel(     max_dispersal_dist = 4,     kfun = negative_exponential_function,     mean_dispersal_dist = 1.2 ) res1 <- dispersal(     dispersal_kernel = kernel,     abundance = abu ) res2 <- dispersal(     dispersal_kernel = kernel,     abundance = abu,     weights = suitab ) stopifnot(sum(res1) - sum(res2) < 0.01)"},{"path":"https://metaRange.github.io/reference/dispersal_fixed_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Directed and fixed sized dispersal — dispersal_fixed_directed","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"Dispersal function uses fixed sized kernel directed dispersal towards areas higher weight. Use case e.g. animals can sense surroundings.","code":""},{"path":"https://metaRange.github.io/reference/dispersal_fixed_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"","code":"dispersal_fixed_directed(abundance, weights, dispersal_kernel)"},{"path":"https://metaRange.github.io/reference/dispersal_fixed_directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"abundance <numeric matrix> Values need non-negative. weights <numeric matrix> Values need non-missing 0 1 result make sense. Needs size abundance. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/reference/dispersal_fixed_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/reference/dispersal_fixed_undirected.html","id":null,"dir":"Reference","previous_headings":"","what":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"Dispersal function uses fixed sized kernel influenced external factors. individuals cell redistributed surrounding cells according probability defined dispersal kernel. Useful e.g. wind dispersed plants.","code":""},{"path":"https://metaRange.github.io/reference/dispersal_fixed_undirected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"","code":"dispersal_fixed_undirected(abundance, dispersal_kernel)"},{"path":"https://metaRange.github.io/reference/dispersal_fixed_undirected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"abundance <numeric matrix> Values need non-negative. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/reference/dispersal_fixed_undirected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolic scaling — metabolic_scaling","title":"Metabolic scaling — metabolic_scaling","text":"function calculate metabolic scaling parameter, based metabolic theory ecology (Brown et al. 2004).","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metabolic scaling — metabolic_scaling","text":"","code":"metabolic_scaling(   normalization_constant,   scaling_exponent,   mass,   temperature,   E,   k = 8.617333e-05 )"},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metabolic scaling — metabolic_scaling","text":"normalization_constant <numeric> normalization constant. scaling_exponent <numeric> allometric scaling exponent mass. mass <numeric matrix>  mean (individual) mass. temperature <numeric matrix> temperature kelvin (K). E <numeric> activation energy electronvolts (eV). k <numeric> Boltzmann's constant (eV / K).","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metabolic scaling — metabolic_scaling","text":"<numeric> scaled parameter.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"equation-","dir":"Reference","previous_headings":"","what":"Equation:","title":"Metabolic scaling — metabolic_scaling","text":"function uses equation form : $$parameter = normalization\\_constant \\cdot mass^{scaling\\_exponent} \\cdot e^{\\frac{Activation\\_energy}{k \\cdot temperature}}$$","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"parameter-","dir":"Reference","previous_headings":"","what":"Parameter:","title":"Metabolic scaling — metabolic_scaling","text":"Note different scaling values different parameter. following summary table 4 Brown, Sibly Kodric-Brown (2012) (see references).","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"units-","dir":"Reference","previous_headings":"","what":"Units:","title":"Metabolic scaling — metabolic_scaling","text":"1 electronvolt = 1.602176634 * 10^-19 Joule Boltzmann constant = 1.380649 * 10^-23 Joule/Kelvin Boltzmann constant eV/K = 8.617333e-05 = (1.380649 * 10^-23) / (1.602176634 * 10^-19)","code":""},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metabolic scaling — metabolic_scaling","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004) Toward Metabolic Theory Ecology. Ecology, 85 1771--1789. doi:10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012) Introduction: Metabolism Basis Theoretical Unification Ecology. Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown) doi:10.1002/9781119968535.ch","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metabolic_scaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metabolic scaling — metabolic_scaling","text":"","code":"reproduction_rate <- 0.25 E_reproduction_rate <- -0.65 estimated_normalization_constant <-     calculate_normalization_constant(         parameter_value = reproduction_rate,         scaling_exponent = -1/4,         mass = 100,         reference_temperature = 273.15 + 10,         E = E_reproduction_rate     ) metabolic_scaling(     normalization_constant = estimated_normalization_constant,     scaling_exponent = -1/4,     mass = 100,     temperature = 273.15 + 20,     E = E_reproduction_rate ) #> [1] 0.6202913  carrying_capacity <- 100 E_carrying_capacity <- 0.65 estimated_normalization_constant <-     calculate_normalization_constant(         parameter_value = carrying_capacity,         scaling_exponent = -3/4,         mass = 100,         reference_temperature = 273.15 + 10,         E = E_carrying_capacity     ) metabolic_scaling(     normalization_constant = estimated_normalization_constant,     scaling_exponent = -3/4,     mass = 100,     temperature = 273.15 + 20,     E = E_carrying_capacity ) #> [1] 40.30365"},{"path":"https://metaRange.github.io/reference/metaRange-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRange: Mechanistic and Metabolic Constrained Species Distribution Model — metaRange-package","title":"metaRange: Mechanistic and Metabolic Constrained Species Distribution Model — metaRange-package","text":"platform build spatially temporally explicit process-based species distribution models, can include arbitrary number environmental factors, species processes including metabolic constraints species interactions. focus simulating populations one multiple species grid based landscape studying meta-population dynamics emergent patterns arise interaction species complex environmental conditions. 'metaRange' provides functions common ecological processes negative exponential, kernel-based dispersal (see Nathan et al. (2012) doi:10.1093/acprof:oso/9780199608898.003.0015 ), calculation environmental suitability based cardinal values ( Yin et al. (1995) doi:10.1016/0168-1923(95)02236-Q , simplified Yan Hunt (1999) doi:10.1006/anbo.1999.0955  see eq: 4), reproduction form Ricker model (see Ricker (1954) doi:10.1139/f54-039  Cabral Schurr (2010) doi:10.1111/j.1466-8238.2009.00492.x ), well metabolic scaling based metabolic theory ecology (see Brown et al. (2004) doi:10.1890/03-9000  Brown, Sibly,Kodric-Brown (2012) doi:10.1002/9781119968535.ch ).","code":""},{"path":"https://metaRange.github.io/reference/metaRange-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"metaRange: Mechanistic and Metabolic Constrained Species Distribution Model — metaRange-package","text":"tba.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRange-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metaRange: Mechanistic and Metabolic Constrained Species Distribution Model — metaRange-package","text":"Maintainer: Stefan Fallert stefan.fallert@stud-mail.uni-wuerzburg.de (ORCID) [copyright holder] Authors: Lea Li (Contributed first implementation metabolic scaling) [copyright holder] Juliano S. Cabral j.sarmentocabral@bham.ac.uk (ORCID) [copyright holder, thesis advisor] contributors: Tyler Morgan-Wall (ORCID) [contributor, copyright holder] Bavarian Ministry Science Arts (bayklif) [funder] Deutsche Bundesstiftung Umwelt (DBU) [funder]","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeEnvironment object — metaRangeEnvironment","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Creates metaRangeEnvironment object form R6 class stores handles environmental values influence species simulation.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<metaRangeEnvironment> object","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"sourceSDS SpatRasterDataset created terra::sds() holds environmental values influencing simulation. Note individual data sets sensibly named names used throughout simulation refer . current R environment holds environmental values influencing present time step simulation regular 2D R matrices.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"metaRangeEnvironment$new() metaRangeEnvironment$set_current() metaRangeEnvironment$print()","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Creates new metaRangeEnvironment object. done automatically simulation created. need call user.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$new(sourceSDS = NULL)"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"sourceSDS <SpatRasterDataset> created terra::sds() holds environmental values influencing simulation. Note individual data sets sensibly named names used throughout simulation refer .","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<metaRangeEnvironment> object","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"# Note: Only for illustration purposes. env <- metaRangeEnvironment$new(sourceSDS = terra::sds(terra::rast(nrow = 2, ncol = 2))) env"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"method-set-current-","dir":"Reference","previous_headings":"","what":"Method set_current()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Set current (active) time step / environment. reason call user. current time step set automatically.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$set_current(layer)"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"layer <integer> layer","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"# Only for illustration purposes. sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) names(sim_env) <- \"env_01\" env <- metaRangeEnvironment$new(sourceSDS = sim_env) env$set_current(layer = 1)"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Prints information environment console","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$print()"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"env <- metaRangeEnvironment$new(     sourceSDS = terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) ) env$print()"},{"path":"https://metaRange.github.io/reference/metaRangeEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"## ------------------------------------------------ ## Method `metaRangeEnvironment$new` ## ------------------------------------------------  # Note: Only for illustration purposes. env <- metaRangeEnvironment$new(sourceSDS = terra::sds(terra::rast(nrow = 2, ncol = 2))) env #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84  #> source(s)   : memory   ## ------------------------------------------------ ## Method `metaRangeEnvironment$set_current` ## ------------------------------------------------  # Only for illustration purposes. sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) names(sim_env) <- \"env_01\" env <- metaRangeEnvironment$new(sourceSDS = sim_env) env$set_current(layer = 1)  ## ------------------------------------------------ ## Method `metaRangeEnvironment$print` ## ------------------------------------------------  env <- metaRangeEnvironment$new(     sourceSDS = terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) ) env$print() #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 2  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84  #> source(s)   : memory"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":null,"dir":"Reference","previous_headings":"","what":"Process priority queue — metaRangePriorityQueue","title":"Process priority queue — metaRangePriorityQueue","text":"Creates priority queue form R6 class, manages correct process execution order.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process priority queue — metaRangePriorityQueue","text":"<[metaRangePriorityQueue]> object","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Process priority queue — metaRangePriorityQueue","text":"metaRangePriorityQueue$new() metaRangePriorityQueue$execute_next_process() metaRangePriorityQueue$enqueue() metaRangePriorityQueue$dequeue() metaRangePriorityQueue$sort_future_queue() metaRangePriorityQueue$update() metaRangePriorityQueue$is_empty() metaRangePriorityQueue$get_queue() metaRangePriorityQueue$get_future_queue() metaRangePriorityQueue$get_current_index() metaRangePriorityQueue$print()","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Process priority queue — metaRangePriorityQueue","text":"Creates new metaRangePriorityQueue object Note: illustration purposes. reason call user. priority queue created automatically simulation created.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$new()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"# Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr_queue"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-execute-next-process-","dir":"Reference","previous_headings":"","what":"Method execute_next_process()","title":"Process priority queue — metaRangePriorityQueue","text":"Executes next process queue. reason call user. next process executed automatically.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$execute_next_process(verbose)"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"verbose <logical> Print timing information .","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<logical> TRUE next process executed, FALSE queue empty.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"# Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$execute_next_process(verbose = TRUE)"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-enqueue-","dir":"Reference","previous_headings":"","what":"Method enqueue()","title":"Process priority queue — metaRangePriorityQueue","text":"Add process (future) queue. Users use method added process simulation via add_process method simulation object argument queue = FALSE. Otherwise process added queue automatically.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$enqueue(process)"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"process <[metaRangeProcess]> process added queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-dequeue-","dir":"Reference","previous_headings":"","what":"Method dequeue()","title":"Process priority queue — metaRangePriorityQueue","text":"Remove process (future) queue. Useful remove process queue longer needed. E.g. species went extinct.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$dequeue(PID = NULL)"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"PID <string> ID process, dequeued.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$dequeue(pr$get_PID()) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-sort-future-queue-","dir":"Reference","previous_headings":"","what":"Method sort_future_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Sort (future) queue based execution priority. method called automatically process added queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$sort_future_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$sort_future_queue() # at least no error"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Process priority queue — metaRangePriorityQueue","text":"Update reset queue. method called automatically end time step.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$update()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-is-empty-","dir":"Reference","previous_headings":"","what":"Method is_empty()","title":"Process priority queue — metaRangePriorityQueue","text":"Check queue empty.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$is_empty()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE queue empty FALSE otherwise.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() stopifnot(pr_queue$is_empty())"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-get-queue-","dir":"Reference","previous_headings":"","what":"Method get_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Get current queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<named int vector> current queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-get-future-queue-","dir":"Reference","previous_headings":"","what":"Method get_future_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Get future queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_future_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<named int vector> future queue.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-get-current-index-","dir":"Reference","previous_headings":"","what":"Method get_current_index()","title":"Process priority queue — metaRangePriorityQueue","text":"Get number / index next executed process.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_current_index()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<integer> index.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_current_index()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Process priority queue — metaRangePriorityQueue","text":"Prints information queue console.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$print()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr_queue$print()"},{"path":"https://metaRange.github.io/reference/metaRangePriorityQueue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"## ------------------------------------------------ ## Method `metaRangePriorityQueue$new` ## ------------------------------------------------  # Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr_queue #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$execute_next_process` ## ------------------------------------------------  # Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$execute_next_process(verbose = TRUE) #> |-  : A #> test #> |---- 0.00034 secs #> [1] TRUE  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$enqueue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue() #> PID-13cda471-A  #>              1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$dequeue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$dequeue(pr$get_PID()) pr_queue$get_future_queue() #> named integer(0)  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$sort_future_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$sort_future_queue() # at least no error  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$update` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue() #> PID-14099e961-A  #>               1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$is_empty` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() stopifnot(pr_queue$is_empty())  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue() #> PID-11228d171-A  #>               1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_future_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue() #> PID-1244c9871-A  #>               1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_current_index` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_current_index() #> [1] 1  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$print` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr_queue$print() #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeProcess object — metaRangeProcess","title":"metaRangeProcess object — metaRangeProcess","text":"Creates species object form R6 class stores handles individual parts define species.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeProcess object — metaRangeProcess","text":"<[metaRangeProcess]> object.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeProcess object — metaRangeProcess","text":"fun <function> processes function.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeProcess object — metaRangeProcess","text":"metaRangeProcess$new() metaRangeProcess$get_PID() metaRangeProcess$get_name() metaRangeProcess$get_priority() metaRangeProcess$get_env_label() metaRangeProcess$print()","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeProcess object — metaRangeProcess","text":"Creates new metaRangeProcess object","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$new(   process_name,   id = \"\",   process_fun,   execution_priority,   env,   env_label = NULL )"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeProcess object — metaRangeProcess","text":"process_name <string> name process. id <string> optional ID process. process_fun <function> function called process executed. function executed specified environment (see argument: env) access variables environment. function may arguments, .e. .null(formals(process_fun)) must TRUE. execution_priority <integer> priority process. lower number earlier process executed. Note priority used sort processes priority queue. actual execution order determined order processes queue. env <environment> environment process executed. env_label <string> optional name execution environment. Just used human readable label debug purposes.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<[metaRangeProcess]> object.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"# Note: Only for illustration purposes. Use the add_process method of the # simulation object to add processes to a simulation. pr <- metaRangeProcess$new(    process_name = \"my_process\",    process_fun = function() {       cat(\"Hello World!\")    },    execution_priority = 1L,    env = new.env(),    env_label = \"my_environment\" ) pr"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-get-pid-","dir":"Reference","previous_headings":"","what":"Method get_PID()","title":"metaRangeProcess object — metaRangeProcess","text":"get process ID","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_PID()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> process ID","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_PID()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"metaRangeProcess object — metaRangeProcess","text":"get process name","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_name()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> process name","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_name()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-get-priority-","dir":"Reference","previous_headings":"","what":"Method get_priority()","title":"metaRangeProcess object — metaRangeProcess","text":"get process execution priority","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_priority()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<integer> process execution priority","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_priority()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-get-env-label-","dir":"Reference","previous_headings":"","what":"Method get_env_label()","title":"metaRangeProcess object — metaRangeProcess","text":"get name process execution environment","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_env_label()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> name process execution environment NULL","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env(), \"human_readable_label\") pr$get_env_label()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeProcess object — metaRangeProcess","text":"Prints information species console","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$print()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$print()"},{"path":"https://metaRange.github.io/reference/metaRangeProcess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"## ------------------------------------------------ ## Method `metaRangeProcess$new` ## ------------------------------------------------  # Note: Only for illustration purposes. Use the add_process method of the # simulation object to add processes to a simulation. pr <- metaRangeProcess$new(    process_name = \"my_process\",    process_fun = function() {       cat(\"Hello World!\")    },    execution_priority = 1L,    env = new.env(),    env_label = \"my_environment\" ) pr #> Process name:  my_process  #> PID:  PID-119211eb-my_process  #> execution_priority:  1  #> execution_environment_label:  my_environment  #> $fun: function() { #>       cat(\"Hello World!\") #>    } #> <environment: 0x000001989ae3e600>  ## ------------------------------------------------ ## Method `metaRangeProcess$get_PID` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_PID() #> [1] \"PID-151a2411-A\"  ## ------------------------------------------------ ## Method `metaRangeProcess$get_name` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_name() #> [1] \"A\"  ## ------------------------------------------------ ## Method `metaRangeProcess$get_priority` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_priority() #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeProcess$get_env_label` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env(), \"human_readable_label\") pr$get_env_label() #> [1] \"human_readable_label\"  ## ------------------------------------------------ ## Method `metaRangeProcess$print` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$print() #> Process name:  A  #> PID:  PID-14b475771-A  #> execution_priority:  1  #> execution_environment_label:   #> $fun: \\() {} #> <environment: 0x000001989b244d10>"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeSimulation object — metaRangeSimulation","title":"metaRangeSimulation object — metaRangeSimulation","text":"Creates simulation object form R6 class stores handles individual parts necessary run simulation.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeSimulation object — metaRangeSimulation","text":"<metaRangeSimulation> object","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeSimulation object — metaRangeSimulation","text":"ID <string> simulation identification. globals <list> place store global variables. environment <[metaRangeEnvironment]> holds environmental values influencing simulation. number_time_steps <integer> number time steps simulation. time_step_layer <integer> vector layer IDs describe environmental layer use time step. current_time_step <integer> current time step. queue <[metaRangePriorityQueue]> manages order processes executed. processes <list> global (simulation level) <[metaRangeProcess]es> seed <integer> seed random number generator.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeSimulation object — metaRangeSimulation","text":"metaRangeSimulation$new() metaRangeSimulation$add_globals() metaRangeSimulation$set_time_layer_mapping() metaRangeSimulation$get_current_time_step() metaRangeSimulation$add_species() metaRangeSimulation$species_names() metaRangeSimulation$add_process() metaRangeSimulation$add_traits() metaRangeSimulation$exit() metaRangeSimulation$begin() metaRangeSimulation$print() metaRangeSimulation$summary()","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Creates new metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$new(source_environment, ID = NULL, seed = NULL)"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"source_environment <SpatRasterDataset> created terra::sds() represents environment. individual data sets represent different environmental variables (e.g. temperature habitat availability) different layer data sets represent different timesteps simulation. function metaRangeSimulation$set_time_layer_mapping() can used extend/ shorten simulation timesteps set mapping time step corresponding environmental layer. can used e.g. repeat first () layer burn-period. number layers must data sets. ID <string> optional simulation identification string. set automatically none specified. seed <integer> optional seed random number generator. set automatically none specified.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<metaRangeSimulation> object.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-add-globals-","dir":"Reference","previous_headings":"","what":"Method add_globals()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Add global variables simulation","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_globals(...)"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"... <atomic> (see base::.atomic()) Variables add simulation. saved accessible 'globals' field.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_globals(a = 1, b = 2) sim$globals$a #> [1] 1"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-set-time-layer-mapping-","dir":"Reference","previous_headings":"","what":"Method set_time_layer_mapping()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Set time layer simulation.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$set_time_layer_mapping(x)"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"x <integer> vector layer indices describe environmental layer use time step.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2, nlyr = 4)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$set_time_layer_mapping(1:2) stopifnot(identical(sim$time_step_layer, 1:2))"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-get-current-time-step-","dir":"Reference","previous_headings":"","what":"Method get_current_time_step()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Get current time step","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$get_current_time_step()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<integer> current time step","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$get_current_time_step() #> [1] 1"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-add-species-","dir":"Reference","previous_headings":"","what":"Method add_species()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds new species simulation","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_species(name)"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"name <string> name ID species.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$species_1"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-species-names-","dir":"Reference","previous_headings":"","what":"Method species_names()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Returns names species simulation.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$species_names()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<character> vector species names","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$species_names() #> [1] \"species_1\" \"species_2\""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-add-process-","dir":"Reference","previous_headings":"","what":"Method add_process()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds process simulation.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_process(   species = NULL,   process_name,   process_fun,   execution_priority,   queue = TRUE )"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"species <string> Name species process added . NULL process added simulation object . process_name <string> Name process add. process_fun <named function> function call process gets executed. execution_priority <positive integer> process run within time step. 1 == highest priority .e. function executed first. queue <boolean> TRUE process added process execution queue directly. FALSE process added simulation queue, means order execute process, added manually via metaRangePriorityQueue$enqueue() method.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {message(\"process_1\")}, 1) sim$species_1$processes$species_process_1 sim$add_process(species = NULL, \"global_process_2\", function() {message(\"process_2\")}, 2) sim$processes$global_process_2"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-add-traits-","dir":"Reference","previous_headings":"","what":"Method add_traits()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds traits species.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_traits(species, population_level = TRUE, ...)"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"species <string> Name species traits added . population_level <boolean> TRUE traits added population level (.e. matrix dimensions (nrow/ncol) environment one value population). means traits either need single values extended matrix via base::matrix() already need matrix dimension. FALSE traits added without conversion may type dimension. ... <atomic> (see base::.atomic()) traits added.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_traits(\"species_1\", population_level = TRUE, a = 1) sim$add_traits(\"species_1\", population_level = FALSE, b = 2, c = \"c\") sim$species_1$traits$a #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 sim$species_1$traits$b #> [1] 2 sim$species_1$traits$c #> [1] \"c\""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-exit-","dir":"Reference","previous_headings":"","what":"Method exit()","title":"metaRangeSimulation object — metaRangeSimulation","text":"called, end simulation (prematurely) current process finished. Useful e.g. end simulation safely (.e. without error) species alive anymore benefit continue execution last time step.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$exit()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"invisible NULL","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {self$sim$exit()}, 1) sim$begin()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-begin-","dir":"Reference","previous_headings":"","what":"Method begin()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Begins simulation","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$begin()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self> finished simulation","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_process(      species = NULL,      \"timestep_counter\",      function() {          message(\"timestep: \", self$get_current_time_step())      },      1 ) sim$begin()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Prints information simulation console","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$print()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$print()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Summarizes information simulation outputs console","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$summary()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$summary()"},{"path":"https://metaRange.github.io/reference/metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"## ------------------------------------------------ ## Method `metaRangeSimulation$new` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary()  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_globals` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_globals(a = 1, b = 2) sim$globals$a #> [1] 1 #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeSimulation$set_time_layer_mapping` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2, nlyr = 4)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$set_time_layer_mapping(1:2) stopifnot(identical(sim$time_step_layer, 1:2))  ## ------------------------------------------------ ## Method `metaRangeSimulation$get_current_time_step` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$get_current_time_step() #> [1] 1 #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_species` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$species_1 #> Species:  species_1  #> processes:  #>  list() #> traits:  #>  list()  ## ------------------------------------------------ ## Method `metaRangeSimulation$species_names` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$species_names() #> [1] \"species_2\" \"species_1\" #> [1] \"species_1\" \"species_2\"  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_process` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {message(\"process_1\")}, 1) sim$species_1$processes$species_process_1 #> Process name:  species_process_1  #> PID:  PID-1337d3c41-species_process_1  #> execution_priority:  1  #> execution_environment_label:  species_1  #> $fun: function() {message(\"process_1\")} #> <environment: 0x0000019898b9c758> sim$add_process(species = NULL, \"global_process_2\", function() {message(\"process_2\")}, 2) sim$processes$global_process_2 #> Process name:  global_process_2  #> PID:  PID-231afd452-global_process_2  #> execution_priority:  2  #> execution_environment_label:  simulation_4ffad86  #> $fun: function() {message(\"process_2\")} #> <environment: 0x0000019898aeec60>  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_traits` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_traits(\"species_1\", population_level = TRUE, a = 1) sim$add_traits(\"species_1\", population_level = FALSE, b = 2, c = \"c\") sim$species_1$traits$a #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 sim$species_1$traits$b #> [1] 2 #> [1] 2 sim$species_1$traits$c #> [1] \"c\" #> [1] \"c\"  ## ------------------------------------------------ ## Method `metaRangeSimulation$exit` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {self$sim$exit()}, 1) sim$begin()  ## ------------------------------------------------ ## Method `metaRangeSimulation$begin` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_process(      species = NULL,      \"timestep_counter\",      function() {          message(\"timestep: \", self$get_current_time_step())      },      1 ) sim$begin() #> timestep: 1 #> timestep: 2 #> timestep: 3 #> timestep: 4  ## ------------------------------------------------ ## Method `metaRangeSimulation$print` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$print() #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary()  ## ------------------------------------------------ ## Method `metaRangeSimulation$summary` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$summary() #> ID: simulation_1e1dafc  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84  #> source(s)   : memory  #> Time step layer mapping:  1  #> Current time step:  1  #> Seed:  589  #> Species: #>    #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeSpecies object — metaRangeSpecies","title":"metaRangeSpecies object — metaRangeSpecies","text":"Creates species object form R6 class stores handles individual parts define species.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeSpecies object — metaRangeSpecies","text":"<metaRangeSpecies> object.","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeSpecies object — metaRangeSpecies","text":"name <string> name ID species. processes <list> <[metaRangeProcess]es>. processes describe species interacts environment, species. traits <list> traits species. sim <[metaRangeSimulation]> reference simulation object species part . Useful access environmental data data species.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeSpecies object — metaRangeSpecies","text":"metaRangeSpecies$new() metaRangeSpecies$print()","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeSpecies object — metaRangeSpecies","text":"Creates new metaRangeSpecies object","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"metaRangeSpecies$new(name, sim)"},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSpecies object — metaRangeSpecies","text":"name <string> name ID species. sim <[metaRangeSimulation]> reference simulation object species part .","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"# The following is bad practice, since species should be added to a simulation # via the add_species method of the simulation object. But for illustration # purposes: sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) test_sim <- metaRangeSimulation$new(source_environment = sim_env) sp <- metaRangeSpecies$new(name = \"species_01\", sim = test_sim) sp"},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeSpecies object — metaRangeSpecies","text":"Prints information species console","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"metaRangeSpecies$print()"},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSpecies object — metaRangeSpecies","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/reference/metaRangeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"## ------------------------------------------------ ## Method `metaRangeSpecies$new` ## ------------------------------------------------  # The following is bad practice, since species should be added to a simulation # via the add_species method of the simulation object. But for illustration # purposes: sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) test_sim <- metaRangeSimulation$new(source_environment = sim_env) sp <- metaRangeSpecies$new(name = \"species_01\", sim = test_sim) sp #> Species:  species_01  #> processes:  #>  list() #> traits:  #>  list()"},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Exponential kernel — negative_exponential_function","title":"Negative Exponential kernel — negative_exponential_function","text":"Negative Exponential kernel","code":""},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative Exponential kernel — negative_exponential_function","text":"","code":"negative_exponential_function(x, mean_dispersal_dist)"},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative Exponential kernel — negative_exponential_function","text":"x <numeric> distance probability calculated. mean_dispersal_dist <numeric> mean dispersal distance (>0)","code":""},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative Exponential kernel — negative_exponential_function","text":"<numeric> probability distance x.","code":""},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Negative Exponential kernel — negative_exponential_function","text":"negative exponential kernel defined : $$f(x) = \\frac{1}{2 \\pi ^2} e^{-\\frac{x}{}}$$ \\(\\) mean dispersal distance divided 2.","code":""},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Negative Exponential kernel — negative_exponential_function","text":"Nathan, R., Klein, E., Robledo-Arnuncio, J.J. Revilla, E. (2012) Dispersal kernels: review. : Dispersal Ecology Evolution pp. 187--210. (eds J. Clobert, M. Baguette, T.G. Benton J.M. Bullock), Oxford, UK: Oxford Academic, 2013. doi:10.1093/acprof:oso/9780199608898.003.0015","code":""},{"path":"https://metaRange.github.io/reference/negative_exponential_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative Exponential kernel — negative_exponential_function","text":"","code":"negative_exponential_function(1, 1) #> [1] 0.08615712"},{"path":"https://metaRange.github.io/reference/plot.metaRangeEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeEnvironment","title":"Plotting function — plot.metaRangeEnvironment","text":"Plots specified current environment metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeEnvironment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeEnvironment","text":"","code":"# S3 method for metaRangeEnvironment plot(x, env_name, col, main = NULL, ...)"},{"path":"https://metaRange.github.io/reference/plot.metaRangeEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeEnvironment","text":"x <metaRangeEnvironment> metaRangeEnvironment object. env_name <string> name (sub) environment plot. col <character> colors use. Defaults grDevices::hcl.colors() n =50 random palette. main <string> optional title plot. labeled automatically NULL. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeEnvironment","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeEnvironment","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1:4, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$environment$set_current(1) plot(test_sim$environment, \"env_01\")"},{"path":"https://metaRange.github.io/reference/plot.metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeSimulation","title":"Plotting function — plot.metaRangeSimulation","text":"Plots specified element metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeSimulation","text":"","code":"# S3 method for metaRangeSimulation plot(x, obj, name, col, ...)"},{"path":"https://metaRange.github.io/reference/plot.metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeSimulation","text":"x <metaRangeSimulation> metaRangeSimulation object. obj <string> either string environment name species. name <string> either name environment name species trait. col <character> colors use. Defaults grDevices::hcl.colors() n = 50 random palette. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeSimulation","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(\"species_01\", trait_01 = matrix(1, nrow = 2, ncol = 2)) plot(test_sim, \"species_01\", \"trait_01\")"},{"path":"https://metaRange.github.io/reference/plot.metaRangeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeSpecies","title":"Plotting function — plot.metaRangeSpecies","text":"Plots specified trait metaRangeSpecies object.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeSpecies","text":"","code":"# S3 method for metaRangeSpecies plot(x, trait_name, col, main = NULL, ...)"},{"path":"https://metaRange.github.io/reference/plot.metaRangeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeSpecies","text":"x <metaRangeSpecies> metaRangeSpecies object. trait_name <string> name trait plot. col <character> colors use. Defaults grDevices::hcl.colors() n =50 random palette. main <string> optional title plot. labeled automatically NULL. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeSpecies","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/reference/plot.metaRangeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeSpecies","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(\"species_01\", trait_01 = matrix(1:4, nrow = 2, ncol = 2)) plot(test_sim$species_01, \"trait_01\")"},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Ricker reproduction model — ricker_reproduction_model","title":"Ricker reproduction model — ricker_reproduction_model","text":"implementation \"classic\" Ricker reproduction model (Ricker, 1954).","code":""},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ricker reproduction model — ricker_reproduction_model","text":"","code":"ricker_reproduction_model(abundance, reproduction_rate, carrying_capacity)"},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ricker reproduction model — ricker_reproduction_model","text":"abundance <numeric> vector (matrix) abundances. reproduction_rate <numeric> vector (matrix) reproduction rates. carrying_capacity <numeric> vector (matrix) carrying capacities.","code":""},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ricker reproduction model — ricker_reproduction_model","text":"<numeric> vector (matrix) abundances.","code":""},{"path":[]},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"equation-","dir":"Reference","previous_headings":"","what":"Equation:","title":"Ricker reproduction model — ricker_reproduction_model","text":"$$abundance_{t+1} = abundance_t \\cdot e^{reproduction\\_rate \\cdot (1 - \\frac{abundance_t}{carrying\\_capacity})}$$ Note input equal size input abundance positive results make sense.","code":""},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ricker reproduction model — ricker_reproduction_model","text":"Cabral, J.S. Schurr, F.M. (2010) Estimating demographic models range dynamics plant species. Global Ecology Biogeography, 19, 85--97. doi:10.1111/j.1466-8238.2009.00492.x Original model: Ricker, W.E. (1954) Stock recruitment. Journal Fisheries Research Board Canada, 11, 559--623. doi:10.1139/f54-039","code":""},{"path":"https://metaRange.github.io/reference/ricker_reproduction_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ricker reproduction model — ricker_reproduction_model","text":"","code":"ricker_reproduction_model(     abundance = 10,     reproduction_rate = 0.25,     carrying_capacity = 100 ) #> [1] 12.52323 ricker_reproduction_model(     abundance = matrix(10, 10, 5),     reproduction_rate =  matrix(seq(-0.5, 0.5, length.out = 25), 10, 5),     carrying_capacity =  matrix(100, 10, 5) ) #>           [,1]      [,2]      [,3]      [,4]     [,5] #>  [1,] 6.376282  9.277435 13.498588  7.691264 11.19072 #>  [2,] 6.619932  9.631944 14.014396  7.985162 11.61834 #>  [3,] 6.872893 10.000000 14.549914  8.290291 12.06230 #>  [4,] 7.135520 10.382120 15.105895  8.607080 12.52323 #>  [5,] 7.408182 10.778842 15.683122  8.935973 13.00176 #>  [6,] 7.691264 11.190723  6.376282  9.277435 13.49859 #>  [7,] 7.985162 11.618342  6.619932  9.631944 14.01440 #>  [8,] 8.290291 12.062302  6.872893 10.000000 14.54991 #>  [9,] 8.607080 12.523227  7.135520 10.382120 15.10590 #> [10,] 8.935973 13.001765  7.408182 10.778842 15.68312"},{"path":"https://metaRange.github.io/reference/save_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Save function — save_species","title":"Save function — save_species","text":"Saves specified traits metaRangeSpecies object.","code":""},{"path":"https://metaRange.github.io/reference/save_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save function — save_species","text":"","code":"save_species(x, traits = NULL, prefix = NULL, path, overwrite = FALSE, ...)"},{"path":"https://metaRange.github.io/reference/save_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save function — save_species","text":"x <metaRangeSpecies> metaRangeSpecies object. traits <character> NULL character vector specifying trait save. NULL, traits saved. prefix <string> prefix file names NULL. path <string>path directory files saved. overwrite <boolean> overwrite existing files. ... additional arguments passed terra::writeRaster.","code":""},{"path":"https://metaRange.github.io/reference/save_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save function — save_species","text":"<invisible character> paths saved files.","code":""},{"path":"https://metaRange.github.io/reference/save_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save function — save_species","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(\"species_01\", trait_01 = matrix(1, nrow = 2, ncol = 2)) res_path <- save_species(     test_sim$species_01,     traits = \"trait_01\",     prefix = basename(tempfile()),     path = tempdir() ) # the following should be TRUE # but might fail due to floating point errors (that's why we round the values) identical(     round(terra::as.matrix(terra::rast(res_path), wide = TRUE)),     round(test_sim$species_01$traits[[\"trait_01\"]]) ) #> [1] TRUE  # cleanup unlink(res_path) stopifnot(!file.exists(res_path))"},{"path":"https://metaRange.github.io/reference/set_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Set verbosity of metaRange simulation — set_verbosity","title":"Set verbosity of metaRange simulation — set_verbosity","text":"Just wrapper options(metaRange.verbose = [0 | 1 | 2]) documented. 0, metaRange functions print messages console. 1, metaRange functions print messages console. 2, metaRange functions print many messages console.","code":""},{"path":"https://metaRange.github.io/reference/set_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set verbosity of metaRange simulation — set_verbosity","text":"","code":"set_verbosity(verbose)"},{"path":"https://metaRange.github.io/reference/set_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set verbosity of metaRange simulation — set_verbosity","text":"verbose <integer> message verbosity (see description).","code":""},{"path":"https://metaRange.github.io/reference/set_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set verbosity of metaRange simulation — set_verbosity","text":"<invisible list> list previous verbosity setting.","code":""},{"path":"https://metaRange.github.io/reference/set_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set verbosity of metaRange simulation — set_verbosity","text":"","code":"set_verbosity(0) getOption(\"metaRange.verbose\") #> [1] 0"},{"path":"https://metaRange.github.io/reference/summary.metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for metaRange simulation — summary.metaRangeSimulation","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"Print summary simulation console.","code":""},{"path":"https://metaRange.github.io/reference/summary.metaRangeSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"","code":"# S3 method for metaRangeSimulation summary(object, ...)"},{"path":"https://metaRange.github.io/reference/summary.metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"object <metaRangeSimulation> metaRangeSimulation object summarize. ... <> ignored.","code":""},{"path":"https://metaRange.github.io/reference/summary.metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"<invisible NULL>","code":""},{"path":"https://metaRange.github.io/reference/summary.metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") summary(test_sim) #> ID: simulation_4e05f3  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84  #> source(s)   : memory  #> names       : env_01  #> Time step layer mapping:  1  #> Current time step:  1  #> Seed:  259  #> Species: #>  species_01  #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/news/index.html","id":"metarange-100","dir":"Changelog","previous_headings":"","what":"metaRange 1.0.0","title":"metaRange 1.0.0","text":"first release","code":""}]
