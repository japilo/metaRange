[{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"time-layer-mapping","dir":"Articles","previous_headings":"","what":"Time layer mapping","title":"02: Advanced setup","text":"setup processing environmental SDS can take quite time, especially environmental data large. order save user time, method set_time_layer_mapping() allows user define custom mapping time steps layers environmental raster. Use cases may : Using “burn-” period simulation, main simulation begins. usually done let simulation state reach (semi) equilibrium state, simulation objectives can studied. environment static doesn’t undergo change, user may want use environmental raster layer time steps. Shortening lengthening number time steps simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"default-mapping","dir":"Articles","previous_headings":"Time layer mapping","what":"Default mapping","title":"02: Advanced setup","text":"default configuration layer environment represents one time step simulation. .e:","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"burn-in-period","dir":"Articles","previous_headings":"Time layer mapping","what":"Burn-in period","title":"02: Advanced setup","text":"add burn-period 10 time steps, environmental data updated, one use function follows:","code":"sim$set_time_layer_mapping(c(rep_len(1, 10), 2:10)) sim$number_time_steps #> [1] 19 sim$time_step_layer #>  [1]  1  1  1  1  1  1  1  1  1  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"static-environment","dir":"Articles","previous_headings":"Time layer mapping","what":"Static environment","title":"02: Advanced setup","text":"use environmental raster (.e. first one) time steps, one can use:","code":"sim$set_time_layer_mapping(rep_len(1, 10)) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"changing-the-number-of-time-steps","dir":"Articles","previous_headings":"Time layer mapping","what":"Changing the number of time steps","title":"02: Advanced setup","text":"way described , one can also pick specific layer used use shorten simulation length.","code":"sim$set_time_layer_mapping(c(2, 4, 6)) sim$number_time_steps #> [1] 3 sim$time_step_layer #> [1] 2 4 6"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"global-variables-and-processes","dir":"Articles","previous_headings":"","what":"Global variables and processes","title":"02: Advanced setup","text":"metaRange uses object orient programming paradigm, means species described biologically relevant processes traits. However, may cases user wants define global variable process shared species, store intermediate results don’t belong one species processes visualize store output. can done using add_globals() function adding global variables add_process() function species argument specified, adding global processes. global variables processes accessible globalsand processes field simulation object , respectively. benefit using global process self keyword refers simulation object , allows easier indexing across multiple species.","code":"sim$add_globals(     global_var = 1     # ... more global variables ) sim$globals$global_var #> [1] 1 sim$add_process(     # Note the missing species argument     process_name = \"global_process\",     process_fun = function() {         # self = simulation object         self$globals         # easy access to simulation functions         self$species_names() # no species yet     },     execution_priority = 1 ) sim$processes$global_process #> Process name:  global_process  #> PID:  PID-127d751e71-global_process  #> execution_priority:  1  #> execution_environment_label:  simulation_192951c9  #> $fun: function() { #>         # self = simulation object #>         self$globals #>         # easy access to simulation functions #>         self$species_names() # no species yet #>     } #> <environment: 0x000001e272cfe968>"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"interaction-with-the-priority-queue","dir":"Articles","previous_headings":"","what":"Interaction with the priority queue","title":"02: Advanced setup","text":"specific study questions, may desired simulate species first time step. example, simulation invasion dynamics, one may want burn-period without invasive species present introduce point. hand, may need simulate species specific time period remove simulation (e.g. point calculating reproduction species gone extinct). accommodate , metaRange allows user manually add remove processes priority queue simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"queuing-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Queuing a process","title":"02: Advanced setup","text":"default behavior add_process() immediately add process priority queue. Setting argument queue = FALSE add process simulation, priority queue. case, user point simulation option add process priority queue using enqueue() method priority queue.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1,     # Note the queue = FALSE argument     queue = FALSE ) sim$add_process(     process_name = \"activate_species_1\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         # Note that when manually changing the queue,         # the changes will take place in the         # _next_ time step         # e.g. the following will lead to the process         # being first executed in time step 4)         if (self$get_current_time_step() == 3) {             message(\"Activating species 1\")             for (pr in self$species_1$processes) {                 self$queue$enqueue(pr)             }         }     },     execution_priority = 1 ) sim$begin() #> time step: 1 #> time step: 2 #> time step: 3 #> Activating species 1 #> time step: 4 #> Species invades! #> time step: 5 #> Species invades! #> time step: 6 #> Species invades!"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"dequeue-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Dequeue a process","title":"02: Advanced setup","text":"dequeue() function priority queue allows user remove process priority queue.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"stop_invasion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 3) {             message(\"Extiction species 1\")             for (pr in self$species_1$processes) {                 # Here we are querying the process ID,                 # which is a unique identifier for each process                 # so that the priority queue knows what to remove                 self$queue$dequeue(pr$get_PID())             }         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Extiction species 1 #> time step: 4 #> time step: 5 #> time step: 6"},{"path":"https://metaRange.github.io/metaRange/articles/02_advanced_setup.html","id":"ending-the-simulation-early","dir":"Articles","previous_headings":"","what":"Ending the simulation early","title":"02: Advanced setup","text":"end simulation safely, last time step, user can use exit() method simulation. end simulation end process called inside . possibly use case conditionally end simulation species extinct.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"end_simualtion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 4) {             message(\"Ending simulation early\")             self$exit()         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Species invades! #> time step: 4 #> Ending simulation early"},{"path":"https://metaRange.github.io/metaRange/articles/03_species_interactions.html","id":"competition","dir":"Articles","previous_headings":"","what":"Competition","title":"03: Species interactions","text":"’ll start adding process simulates competition two species. process reduce carrying capacity habitat cell based abundance species. simplicity, ’ll assume asymmetric competition, species 1 superior competitor. Therefore ’ll reduce carrying capacity species 2 based abundance species 1. Note happens reproduction process, carrying capacity reduced next time step, current one. One change changing execution priority competition process.  can see, species 2 able survive habitat unsuitable species 1.","code":"sim$add_process(     species = \"species_2\",     process_name = \"competition\",     process_fun = function() {         self$traits$carrying_capacity <-             self$traits$carrying_capacity - self$sim$species_1$traits$abundance          self$traits$carrying_capacity[self$traits$carrying_capacity < 0] <- 0     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/03_species_interactions.html","id":"throphic-interactions","dir":"Articles","previous_headings":"","what":"Throphic interactions","title":"03: Species interactions","text":"can also add process simulates trophic interactions form predation. Assuming species 2 predator species 1 prey, means species 2 reduce abundance species 1, can occur areas species 1. ’ll use similar setup , slightly adjusted values: now process simulates predation. Note predation effectiveness dependent climate suitability predator.  Note species 2 occupies areas species 1 despite completely different climatic niche. Reminder: species_1 species_2","code":"sim <- create_simulation(create_example_landscape()) sim$add_species(name = \"species_1\") sim$add_species(name = \"species_2\")  sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 10000,     climate_suitability = 1,     reproduction_rate = 0.5,     carrying_capacity = 10000 ) sim$add_traits(     species = \"species_2\",     population_level = TRUE,     abundance = 500,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000 ) sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 3,         kfun = negative_exponential_function,         mean_dispersal_dist = 1     ) ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 290,     min_temperature = 270,     max_precipitation = 1000,     optimal_precipitation = 800,     min_precipitation = 0 ) sim$add_traits(     species = \"species_2\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 270,     min_temperature = 260,     max_precipitation = 1000,     optimal_precipitation = 300,     min_precipitation = 0 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits$carrying_capacity <-             self$traits$carrying_capacity *             self$traits$climate_suitability          self$traits$reproduction_rate <-             self$traits$reproduction_rate *             self$sim$environment$current$habitat          self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate,                 self$traits$carrying_capacity             )     },     execution_priority = 2 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]])     },     execution_priority = 3 ) sim$add_globals(trophic_conversion_factor = 0.5) sim$add_process(     species = \"species_2\",     process_name = \"predation\",     process_fun = function() {         self$traits$abundance <-             self$sim$species_1$traits$abundance *             self$traits$climate_suitability *             self$sim$globals$trophic_conversion_factor          self$sim$species_1$traits$abundance <-             self$sim$species_1$traits$abundance -             self$sim$species_1$traits$abundance *             self$traits$climate_suitability     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols) max_temperature = 300 optimal_temperature = 290 min_temperature = 270 max_precipitation = 1000 optimal_precipitation = 800 min_precipitation = 0 max_temperature = 300 optimal_temperature = 270 min_temperature = 260 max_precipitation = 1000 optimal_precipitation = 300 min_precipitation = 0"},{"path":"https://metaRange.github.io/metaRange/articles/04_metabolic_scaling.html","id":"calculating-the-normalization-constant","dir":"Articles","previous_headings":"","what":"Calculating the normalization constant","title":"04: Metabolic scaling","text":"absence experimentally measured values normalization constant, metaRange offers function calculate_normalization_constant() calculate normalization constant based estimated value parameter reference temperature.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/04_metabolic_scaling.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"04: Metabolic scaling","text":"Setup basic simulation. Define basic traits. Add parameter used metabolic scaling global variables, since species specific. Add traits used reproduction model including estimate reproduction rate carrying capacity. Calculate normalization constant, based parameter estimate optimal temperature species. Note also done loop multiple species. Add process metabolic scaling time step. point, processes added use scaled parameters. just plot scaled parameter instead.  Note results show “everything else equal” scenario, variable temperature. realistic scenario, suitability habitat might also influence reproduction rate carrying capacity mean individual body mass might change temperature change results.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"sp1\") sim$add_traits(     species = \"sp1\",     population_level = FALSE,     \"suitability\" = NA_real_,     \"temperature_maximum\" = 30 + 273,     \"temperature_optimum\" = 20 + 273,     \"temperature_minimum\" = 0 + 273,     \"precipitation_maximum\" = 1200,     \"precipitation_optimum\" = 800,     \"precipitation_minimum\" = 0 ) sim$add_globals(     \"E_reproduction_rate\" = -0.65,     \"E_carrying_capacity\" = 0.65,     \"exponent_reproduction_rate\" = -1 / 4,     \"exponent_carrying_capacity\" = -3 / 4,     \"k\" = 8.617333e-05 ) sim$add_traits(     species = \"sp1\",     population_level = TRUE,     \"abundance\" = 100,     \"reproduction_rate\" = 0.5,     \"carrying_capacity\" = 1000,     \"mass\" = 1 ) sim$add_traits(     species = \"sp1\",     population_level = FALSE,     \"reproduction_rate_mte_constant\" = calculate_normalization_constant(         parameter_value =             sim$sp1$traits[[\"reproduction_rate\"]][[1]],         scaling_exponent =             sim$globals[[\"exponent_reproduction_rate\"]],         mass =             sim$sp1$traits[[\"mass\"]][[1]],         reference_temperature =             sim$sp1$traits[[\"temperature_optimum\"]],         E =             sim$globals[[\"E_reproduction_rate\"]],         k =             sim$globals[[\"k\"]]     ),     \"carrying_capacity_mte_constant\" = calculate_normalization_constant(         parameter_value =             sim$sp1$traits[[\"carrying_capacity\"]][[1]],         scaling_exponent =             sim$globals[[\"exponent_carrying_capacity\"]],         mass =             sim$sp1$traits[[\"mass\"]][[1]],         reference_temperature =             sim$sp1$traits[[\"temperature_optimum\"]],         E =             sim$globals[[\"E_carrying_capacity\"]],         k =             sim$globals[[\"k\"]]     ) ) sim$add_process(     species = \"sp1\",     process_name = \"mte\",     process_fun = function() {         self$traits[[\"reproduction_rate\"]] <- metabolic_scaling(             normalization_constant =                 self$traits[[\"reproduction_rate_mte_constant\"]],             scaling_exponent =                 self$sim$globals[[\"exponent_reproduction_rate\"]],             mass =                 self$traits[[\"mass\"]],             temperature =                 self$sim$environment$current[[\"temperature\"]],             E =                 self$sim$globals[[\"E_reproduction_rate\"]],             k =                 self$sim$globals[[\"k\"]]         )          self$traits[[\"carrying_capacity\"]] <- metabolic_scaling(             normalization_constant =                 self$traits[[\"carrying_capacity_mte_constant\"]],             scaling_exponent =                 self$sim$globals[[\"exponent_carrying_capacity\"]],             mass =                 self$traits[[\"mass\"]],             temperature =                 self$sim$environment$current[[\"temperature\"]],             E =                 self$sim$globals[[\"E_carrying_capacity\"]],             k =                 self$sim$globals[[\"k\"]]         )     },     execution_priority = 2 ) sim$set_time_layer_mapping(c(1, 2)) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"sp1\", \"reproduction_rate\", col = plot_cols) plot(sim, \"sp1\", \"carrying_capacity\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/04_metabolic_scaling.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"04: Metabolic scaling","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004), Toward Metabolic Theory Ecology. Ecology, 85: 1771-1789. https://doi.org/10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012). Introduction: Metabolism Basis Theoretical Unification Ecology. : Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown). https://doi.org/10.1002/9781119968535.ch","code":""},{"path":"https://metaRange.github.io/metaRange/articles/05_directed_dispersal.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"05: Directed (weighted) dispersal","text":"Setup basic simulation two identical species. Now add two methods dispersal two species highlight difference.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$add_traits(     species = c(\"species_1\", \"species_2\"),     abundance = 100,     climate_suitability = 1 ) sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 288,     min_temperature = 280,     max_precipitation = 1000,     optimal_precipitation = 700,     min_precipitation = 200,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 12,         kfun = negative_exponential_function,         mean_dispersal_dist = 6     ) ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits[[\"abundance\"]] <-             self$traits[[\"abundance\"]] *             self$traits[[\"climate_suitability\"]]     },     execution_priority = 2 )"},{"path":"https://metaRange.github.io/metaRange/articles/05_directed_dispersal.html","id":"unweighted-dispersal","dir":"Articles","previous_headings":"","what":"Unweighted dispersal","title":"05: Directed (weighted) dispersal","text":"","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/05_directed_dispersal.html","id":"weighted-dispersal","dir":"Articles","previous_headings":"","what":"Weighted dispersal","title":"05: Directed (weighted) dispersal","text":"","code":"sim$add_process(     species = \"species_2\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]],             weights = self$traits[[\"climate_suitability\"]]         )     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/05_directed_dispersal.html","id":"comparison-of-the-results","dir":"Articles","previous_headings":"","what":"Comparison of the results","title":"05: Directed (weighted) dispersal","text":"see effect, run simulation 10 time steps plot results.  Note plot species two less “blurry” different scales two plots. first species looses individuals dispersing unsuitable habitat, second species can keep much larger population size, moving towards suitable habitat dispersal.","code":"sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/06_age-structured-populations.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"06: Age structured populations","text":"Setup basic simulation.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"species_1\")"},{"path":"https://metaRange.github.io/metaRange/articles/06_age-structured-populations.html","id":"traits","dir":"Articles","previous_headings":"","what":"Traits","title":"06: Age structured populations","text":"Now add traits juveniles adults.","code":"sim$add_traits(     species = \"species_1\",     n_juveniles = 100,     n_adults = 100,     mortality_juveniles = 0.1,     mortality_adults = 0.7,     reproduction_rate = 2 ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 8,         kfun = negative_exponential_function,         mean_dispersal_dist = 4     ) )"},{"path":"https://metaRange.github.io/metaRange/articles/06_age-structured-populations.html","id":"processes","dir":"Articles","previous_headings":"","what":"Processes","title":"06: Age structured populations","text":"Now add processes manage transition age classes.","code":"sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <-             self$traits[[\"n_adults\"]] + (                 self$traits[[\"n_adults\"]] * self$traits[[\"reproduction_rate\"]]             ) * self$sim$environment$current$habitat     },     execution_priority = 1 ) sim$add_process(     species = \"species_1\",     process_name = \"getting_older\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] +               self$traits[[\"n_juveniles\"]] * (1 - self$traits[[\"mortality_juveniles\"]])     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/06_age-structured-populations.html","id":"more-processes","dir":"Articles","previous_headings":"","what":"More processes","title":"06: Age structured populations","text":"dispersal mortality.","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_of_juveniles\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <- dispersal(             abundance = self$traits[[\"n_juveniles\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 2 ) sim$add_process(     species = \"species_1\",     process_name = \"mortality_of_adults\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] * (1 - self$traits[[\"mortality_adults\"]])     },     execution_priority = 4 )"},{"path":"https://metaRange.github.io/metaRange/articles/06_age-structured-populations.html","id":"result","dir":"Articles","previous_headings":"","what":"Result","title":"06: Age structured populations","text":"Lastly, add process reports numbers adults juveniles time, execute simulation plot results.","code":"sim$add_globals(n_juveniles = c(), n_adults = c()) sim$add_process(     process_name = \"logger\",     process_fun = function() {         self$globals$n_juveniles <-             c(self$globals$n_juveniles, sum(self$species_1$traits[[\"n_juveniles\"]]))         self$globals$n_adults <-             c(self$globals$n_adults, sum(self$species_1$traits[[\"n_adults\"]]))     },     execution_priority = 5 ) sim$begin() plot(     1:10,     sim$globals$n_juveniles,     col = \"darkred\",     type = \"l\",     ylim = c(0, 2000000),     xlab = \"Time\",     ylab = \"Number of individuals\",     cex.lab = 0.7,     cex.axis = 0.7 ) lines(1:10, sim$globals$n_adults, col = \"darkblue\") legend(     \"topright\",     legend = c(\"juveniles\", \"adults\"),     col = c(\"darkred\", \"darkblue\"),     lty = 1,     cex = 0.7 )"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"setting-up-a-simulation","dir":"Articles","previous_headings":"","what":"Setting up a simulation","title":"01: Introduction to metaRange","text":"Following simple example set simulation metaRange. example use single species one environmental factor (habitat quality). end introduction see abundance species changes relation quality habitat population occupies. start, need load package dependencies.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"loading-the-landscape","dir":"Articles","previous_headings":"","what":"Loading the landscape","title":"01: Introduction to metaRange","text":"first step setting simulation loading environment simulation take place. can either real world data “theoretical” / generated data may include example different climate variables, land cover elevation. simulation expects data SpatRasterDataset (SDS) collection different raster files share extent resolution. sub-dataset SDS represents one environmental variable layer represents one time step simulation. words, metaRange simulate environmental conditions , expects user provide environmental data time step. create dataset one can use function terra::sds(). One important note: Since layer represent condition one time step, raster files go SDS need number layers (.e. desired number time steps simulation ). SDS created, individual subdatasets named, since simulation refer . simplify introduction, use example landscape consisting habitat quality data, 10 time steps (layers) (.e. environmental change). Luckily terra package built-demo can use purpose. Figure 3: habitat quality example landscape. Note: higher value = better habitat quality Now can turn raster one layer SDS multiple layer (one time step).","code":"# find the file raster_file <- system.file(\"ex/elev.tif\", package = \"terra\")  # load it r <- rast(raster_file)  # scale it r <- scale(r, center = FALSE, scale = TRUE) plot(r, main = \"Habitat quality\") r <- rep(r, 10) landscape <- sds(r) names(landscape) <- c(\"habitat_quality\") landscape #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : habitat_quality"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"pre-setup","dir":"Articles","previous_headings":"","what":"Pre-setup","title":"01: Introduction to metaRange","text":"creating simulation, may helpful enable extensive reporting, print lot information time metaRange function called. can enabled disabled time (.e. also simulation running), order highlight function call tutorial , enable beginning setup.","code":"# 0 = no reporting # 1 = a bit of info # 2 = very verbose set_verbosity(2)"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"creating-the-simulation","dir":"Articles","previous_headings":"","what":"Creating the simulation","title":"01: Introduction to metaRange","text":"landscape loaded, simulation can created using create_simulation() function. required argument source_environment landscape / environment SDS created first step. One can optionally specify ID simulation seed random number generator. want inspect simulation object, can either print , lists fields methods use summary() function get overview simulation state.","code":"sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 ) #> number of time steps: 10 #> time step layer mapping: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> added environment #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : habitat_quality #>  #> created simulation: example_simulation sim #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary() summary(sim) #> ID: example_simulation  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : habitat_quality  #> Time step layer mapping:  1 2 3 4 5 6 7 8 9 10  #> Current time step:  1  #> Seed:  1  #> Species: #>    #> Simulation level processes: #> NULL #> Gobal variables: #> NULL #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"adding-species-to-the-simulation","dir":"Articles","previous_headings":"","what":"Adding species to the simulation","title":"01: Introduction to metaRange","text":"simulation created, species can added using add_species() function. point one switch syntax R6 package, metaRange uses. means add_species() method simulation object can called using $ operator (.e. indexing simulation object calling function stored inside ). required argument name name species added. species can now accessed using $ operator .","code":"sim$add_species(name = \"species_1\") #> adding species #> Name: species_1 sim$species_1 #> Species:  species_1  #> processes:  #> NULL #> traits:  #> character(0)"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"adding-traits-to-species","dir":"Articles","previous_headings":"","what":"Adding traits to species","title":"01: Introduction to metaRange","text":"species added simulation, traits can assigned using add_traits() method. first argument species character vector species names trait assigned . second argument population_level, TRUE/FALSE value, decides trait stored one value per population (.e. matrix size landscape) (.e. one value per species). following arguments can supplied form trait_name = trait_value. now add three traits: abundance (number individuals population), reproduction_rate (fast populations can reproduce) carrying_capacity (maximum number individuals per grid cell). Traits always represent “current” state species. means abundance use input represents initial state simulation. course simulation (.e. time step) traits can updated change. example, abundance change time step e.g. reproduction rate stays , cases trait might change time. can check traits species printing : plotting : Figure 4: initial abundance species. Note plot interesting, since abundance population beginning simulation.","code":"sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 100,     reproduction_rate = 0.5,     carrying_capacity = 1000     # ...     # Note that here could be more traits, there is no limit ) #> adding traits: #> [1] \"abundance\"         \"reproduction_rate\" \"carrying_capacity\" #>  #> to species: #> [1] \"species_1\" #> sim$species_1$traits #> abundance :  num [1:90, 1:95] 100 100 100 100 100 100 100 100 100 100 ... #> carrying_capacity :  num [1:90, 1:95] 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 ... #> reproduction_rate :  num [1:90, 1:95] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... plot(sim$species_1, \"abundance\")"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"adding-processes","dir":"Articles","previous_headings":"","what":"Adding processes","title":"01: Introduction to metaRange","text":"species traits added, processes describe species interacts environment can added, using add_process() method. arguments : species character vector species get process, process_name human readable name process process_fun function called process executed. One argument might confusing execution_priority. number gives process priority “weight” decides order processes executed within one time step. smaller number, earlier process executed (e.g. 1 gets executed 2). case two () processes priority, assumed independent execution order matter.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"reproduction","dir":"Articles","previous_headings":"Adding processes","what":"Reproduction","title":"01: Introduction to metaRange","text":"example add single process (reproduction) species, going calculate abundance (population) next time step, depending habitat quality. , can use built function ricker_reproduction_model() implements “classic” Ricker reproduction model (Ricker, W.E. (1954) compare also: Cabral, J.S. Schurr, F.M. (2010)) [Ref. 1 & 2]. Note use self keyword function. context, self refers species process attached . means function can access species traits modify also access environment (species holds reference simulation created ).","code":"sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         # use a ricker reproduction model         # to calculate the new abundance         # and let the carrying capacity         # depend on the habitat quality         ricker_reproduction_model(             self$traits$abundance,             self$traits$reproduction_rate,             self$traits$carrying_capacity * self$sim$environment$current$habitat_quality         )          # print out the current mean abundance         print(             paste0(\"mean abundance: \", mean(self$traits$abundance))         )     },     execution_priority = 1 ) #> adding process: reproduction #> to species: #> [1] \"species_1\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"executing-the-simulation","dir":"Articles","previous_headings":"","what":"Executing the simulation","title":"01: Introduction to metaRange","text":"species, traits processes added simulation, can executed via begin() method.","code":"sim$begin() #> Starting simualtion. #> passed initial sanity checks. #> start of time step: 1 #> |- species_1 : reproduction #> [1] \"mean abundance: 84.1732579542268\" #> |---- 0.00055 secs #> end of time step: 1 #> 0.059 secs remaining (estimate) #> 10 % done #> start of time step: 2 #> |- species_1 : reproduction #> [1] \"mean abundance: 127.598064388471\" #> |---- 0.00053 secs #> end of time step: 2 #> 0.083 secs remaining (estimate) #> 20 % done #> start of time step: 3 #> |- species_1 : reproduction #> [1] \"mean abundance: 185.433176212344\" #> |---- 0.00046 secs #> end of time step: 3 #> 0.038 secs remaining (estimate) #> 30 % done #> start of time step: 4 #> |- species_1 : reproduction #> [1] \"mean abundance: 254.974925085775\" #> |---- 0.00077 secs #> end of time step: 4 #> 0.037 secs remaining (estimate) #> 40 % done #> start of time step: 5 #> |- species_1 : reproduction #> [1] \"mean abundance: 328.335965177599\" #> |---- 0.00069 secs #> end of time step: 5 #> 0.04 secs remaining (estimate) #> 50 % done #> start of time step: 6 #> |- species_1 : reproduction #> [1] \"mean abundance: 394.79908318955\" #> |---- 0.00059 secs #> end of time step: 6 #> 0.033 secs remaining (estimate) #> 60 % done #> start of time step: 7 #> |- species_1 : reproduction #> [1] \"mean abundance: 446.224976588256\" #> |---- 0.00062 secs #> end of time step: 7 #> 0.027 secs remaining (estimate) #> 70 % done #> start of time step: 8 #> |- species_1 : reproduction #> [1] \"mean abundance: 480.705159122178\" #> |---- 0.00042 secs #> end of time step: 8 #> 0.011 secs remaining (estimate) #> 80 % done #> start of time step: 9 #> |- species_1 : reproduction #> [1] \"mean abundance: 501.356439544315\" #> |---- 0.00042 secs #> end of time step: 9 #> 0.0053 secs remaining (estimate) #> 90 % done #> start of time step: 10 #> |- species_1 : reproduction #> [1] \"mean abundance: 512.803082103058\" #> |---- 0.00045 secs #> end of time step: 10 #> 0 secs remaining (estimate) #> 100 % done #> Simulation: 'example_simulation' finished #> Exiting the Simulation #> Runtime: 0.076 secs"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the results","title":"01: Introduction to metaRange","text":"investigate results, can use plot() function. Figure 5: resulting abundance distribution species 1 10 simulation time steps.","code":"# define a nice color palette plot_cols <- hcl.colors(100, \"BluYl\", rev = TRUE) plot(     sim,     obj = \"species_1\",     name = \"abundance\",     main = \"Species 1: abundance\",     col = plot_cols )"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"saving-the-simulation","dir":"Articles","previous_headings":"","what":"Saving the simulation","title":"01: Introduction to metaRange","text":"save results can use save_species() function. save (possibly specified) traits species, either raster (.tif) text (.csv) file, whatever appropriate data. Note function save species processes. One keep copy script used run simulation make repeatable.","code":"save_species(     sim$species_1,     traits = c(\"name\", \"of\", \"one_or_more\", \"traits\"),     path = \"path/to/a/folder/\" )"},{"path":"https://metaRange.github.io/metaRange/articles/A01_intro.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"01: Introduction to metaRange","text":"Ricker, W.E. (1954) Stock recruitment. Journal Fisheries Research Board Canada, 11, 559–623. doi:10.1139/f54-039 Cabral, J.S. Schurr, F.M. (2010) Estimating demographic models range dynamics plant species. Global Ecology Biogeography, 19, 85–97. doi:10.1111/j.1466-8238.2009.00492.x","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"setting-up-the-simulation","dir":"Articles","previous_headings":"","what":"Setting up the simulation","title":"02: Multiple species","text":"previously, start loading packages creating landscape. Figure 1: habitat quality example landscape. Note: higher value = better habitat quality , create simulation add landscape .","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55  # find the file raster_file <- system.file(\"ex/elev.tif\", package = \"terra\")  # load it r <- rast(raster_file)  # scale it r <- scale(r, center = FALSE, scale = TRUE)  r <- rep(r, 10) landscape <- sds(r) names(landscape) <- c(\"habitat_quality\")  # plot the first layer of the landscape plot(landscape[[\"habitat_quality\"]][[1]], main = \"Habitat quality\") sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 )"},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"adding-more-species-to-the-simulation","dir":"Articles","previous_headings":"","what":"Adding more species to the simulation","title":"02: Multiple species","text":"Instead adding one species simulation, can just repeat `add_species() call add . point wondering , many species simulation, can use species_names() method.","code":"species_to_add <- c(\"species_1\", \"species_2\") for (species in species_to_add) {     sim$add_species(name = species) } sim$species_names() #> [1] \"species_2\" \"species_1\""},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"adding-traits-to-multiple-species","dir":"Articles","previous_headings":"","what":"Adding traits to (multiple) species","title":"02: Multiple species","text":"add_traits() method able add (multiple) traits multiple species , useful setting large number species traits. instead specifying one species argument, can specify vector species names, get traits. want add trait species simulation, without type names, use already mentioned species_names() method get vector species names use species argument. Since two species simulation equivalent previous call.","code":"sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = TRUE,     abundance = 100 ) sim$add_traits(     species = sim$species_names(),     population_level = TRUE,     reproduction_rate = 0.5,     carrying_capacity = 1000 )"},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"adding-processes","dir":"Articles","previous_headings":"","what":"Adding processes","title":"02: Multiple species","text":"now, two species simulation virtually identical. order make behave differently, can add different processes .","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"reproduction","dir":"Articles","previous_headings":"Adding processes","what":"Reproduction","title":"02: Multiple species","text":"going use reproduction process previous vignette, vary influence habitat quality. case species 1, habitat quality affect carrying capacity habitat. case species 2, habitat quality affect reproduction rate.","code":"sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         ricker_reproduction_model(             self$traits$abundance,             self$traits$reproduction_rate,             self$traits$carrying_capacity * self$sim$environment$current$habitat_quality         )         print(             paste0(self$name, \" mean abundance: \", mean(self$traits$abundance))         )     },     execution_priority = 1 ) sim$add_process(     species = \"species_2\",     process_name = \"reproduction\",     process_fun = function() {         self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate * self$sim$environment$current$habitat_quality,                 self$traits$carrying_capacity             )         print(             paste0(self$name, \" mean abundance: \", mean(self$traits$abundance))         )     },     execution_priority = 1 )"},{"path":"https://metaRange.github.io/metaRange/articles/A02_multiple_species.html","id":"executing-the-simulation","dir":"Articles","previous_headings":"","what":"Executing the simulation","title":"02: Multiple species","text":"Now can execute simulation compare results. Figure 2: resulting abundance distribution species 1 10 simulation time steps. Figure 3: resulting abundance distribution species 2 10 simulation time steps.","code":"set_verbosity(0) sim$begin() #> [1] \"species_1 mean abundance: 84.1732579542268\" #> [1] \"species_2 mean abundance: 83.9862282167713\" #> [1] \"species_1 mean abundance: 127.598064388471\" #> [1] \"species_2 mean abundance: 128.093897941553\" #> [1] \"species_1 mean abundance: 185.433176212344\" #> [1] \"species_2 mean abundance: 187.269476742542\" #> [1] \"species_1 mean abundance: 254.974925085775\" #> [1] \"species_2 mean abundance: 256.540644607799\" #> [1] \"species_1 mean abundance: 328.335965177599\" #> [1] \"species_2 mean abundance: 325.349187830559\" #> [1] \"species_1 mean abundance: 394.79908318955\" #> [1] \"species_2 mean abundance: 384.503328576066\" #> [1] \"species_1 mean abundance: 446.224976588256\" #> [1] \"species_2 mean abundance: 430.718982598954\" #> [1] \"species_1 mean abundance: 480.705159122178\" #> [1] \"species_2 mean abundance: 464.734433159244\" #> [1] \"species_1 mean abundance: 501.356439544315\" #> [1] \"species_2 mean abundance: 488.741052995808\" #> [1] \"species_1 mean abundance: 512.803082103058\" #> [1] \"species_2 mean abundance: 505.185406158201\" # define a nice color palette plot_cols <- hcl.colors(100, \"BluYl\", rev = TRUE) plot(     sim,     obj = \"species_1\",     name = \"abundance\",     main = \"Species 1: abundance\",     col = plot_cols ) plot(     sim,     obj = \"species_2\",     name = \"abundance\",     main = \"Species 2: abundance\",     col = plot_cols )"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"03: Niche suitability","text":"First load packages create example landscape. Now can () turn raster SDS one layer per time step. Figure 1: temperature example landscape. first layer 10 identical ones shown. Figure 2: precipitation example landscape. first layer 10 identical ones shown.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 set_verbosity(2)  # find the example raster file raster_file <- system.file(\"ex/elev.tif\", package = \"terra\")  # load it r <- rast(raster_file)  # adjust the values temperature <- scale(r, center = FALSE, scale = TRUE) * 10 + 273.15 precipitation <- r * 2 temperature <- rep(temperature, 10) precipitation <- rep(precipitation, 10) landscape <- sds(temperature, precipitation) names(landscape) <- c(\"temperature\", \"precipitation\") terra::plot(     landscape$temperature[[1]],     col = hcl.colors(100, \"RdYlBu\", rev = TRUE),     main = \"Temperature [K]\" ) terra::plot(     landscape$precipitation[[1]],     col = hcl.colors(100, \"Earth\"),     main = \"Precipitation [mm]\" )"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"creating-the-simulation-and-species","dir":"Articles","previous_headings":"","what":"Creating the simulation and species","title":"03: Niche suitability","text":"","code":"sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 ) #> number of time steps: 10 #> time step layer mapping: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> added environment #> class       : SpatRasterDataset  #> subdatasets : 2  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10, 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : temperature, precipitation #>  #> created simulation: example_simulation sim$add_species(name = \"species_1\") #> adding species #> Name: species_1 sim$add_species(name = \"species_2\") #> adding species #> Name: species_2"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"adding-traits-to-species","dir":"Articles","previous_headings":"","what":"Adding traits to species","title":"03: Niche suitability","text":"start, add traits previous tutorials also add trait called climate_suitability, store information suitable environment cell population lives . Contrary , traits may require stored population level. example, case environmental preferences species. assume property species whole (.e. populations), can set parameter population_level FALSE traits added , without processing. order make simulation interesting, can give species different environmental preferences two environmental variables simulation environment (temperature & precipitation). Note names traits arbitrary can chosen user predetermined connection e.g. “min_temperature” temperature variable environment. establish connections, user needs add species processes access correct traits use sensible way. meaningful trait names important.","code":"sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = TRUE,     abundance = 500,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000 ) #> adding traits: #> [1] \"abundance\"           \"climate_suitability\" \"reproduction_rate\"   #> [4] \"carrying_capacity\" #>  #> to species: #> [1] \"species_1\" \"species_2\" #> sim$add_traits(     species = \"species_1\",     population_level = FALSE,     max_temperature = 300, # Kelvin     optimal_temperature = 288,     min_temperature = 280,     max_precipitation = 1000, # mm     optimal_precipitation = 700,     min_precipitation = 200 ) #> adding traits: #> [1] \"max_temperature\"       \"optimal_temperature\"   \"min_temperature\"       #> [4] \"max_precipitation\"     \"optimal_precipitation\" \"min_precipitation\" #>  #> to species: #> [1] \"species_1\" #>  sim$add_traits(     species = \"species_2\",     population_level = FALSE,     max_temperature = 290,     optimal_temperature = 285,     min_temperature = 270,     max_precipitation = 1000,     optimal_precipitation = 500,     min_precipitation = 0 ) #> adding traits: #> [1] \"max_temperature\"       \"optimal_temperature\"   \"min_temperature\"       #> [4] \"max_precipitation\"     \"optimal_precipitation\" \"min_precipitation\" #> to species: #> [1] \"species_2\" #>"},{"path":[]},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"calculate-the-suitability","dir":"Articles","previous_headings":"Adding processes","what":"Calculate the suitability","title":"03: Niche suitability","text":"calculate suitability, use metaRange function calculate_suitability() adapted formula published Yin et al. 1995 (Ref. 1) simplified Yan Hunt 1999 (eq:4 Ref. 2). formula takes three cardinal values environmental niche (minimum tolerable value, optimal vale maximum tolerable value) constructs suitability curve based beta distribution. Figure 3: Example suitability curve temperature niche species 2. following code add process species calculates environmental suitability precipitation temperature multiplies values create joint suitability two niches. Note one also define custom function calculate suitability, built-function adequately describe ecology target species.","code":"min_value <- 270 opt_value <- 285 max_value <- 290 x <- seq(min_value, max_value, length.out = 100) y <- calculate_suitability(max_value, opt_value, min_value, x) plot(x, y, type = \"l\", xlab = \"Temperature [K]\", ylab = \"Suitability\")"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"suitability","dir":"Articles","previous_headings":"Adding processes","what":"Suitability","title":"03: Niche suitability","text":"","code":"sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) #> adding process: calculate_suitability #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"reproduction","dir":"Articles","previous_headings":"Adding processes","what":"Reproduction","title":"03: Niche suitability","text":"previous tutorials, use Ricker reproduction model calculate new abundance species, time let carrying capacity reproduction rate depend niche suitability environment.","code":"sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate * self$traits$climate_suitability,                 self$traits$carrying_capacity * self$traits$climate_suitability             )     },     execution_priority = 2 ) #> adding process: reproduction #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"03: Niche suitability","text":"Now, can execute simulation compare results. Figure 6: resulting abundance distribution species 1 10 simulation time steps. Figure 7: resulting abundance distribution species 2 10 simulation time steps.","code":"set_verbosity(1) sim$begin() #> Starting simualtion. #> start of time step: 1 #> end of time step: 1 #> 0.13 secs remaining (estimate) #> 10 % done #> start of time step: 2 #> end of time step: 2 #> 0.23 secs remaining (estimate) #> 20 % done #> start of time step: 3 #> end of time step: 3 #> 0.08 secs remaining (estimate) #> 30 % done #> start of time step: 4 #> end of time step: 4 #> 0.072 secs remaining (estimate) #> 40 % done #> start of time step: 5 #> end of time step: 5 #> 0.058 secs remaining (estimate) #> 50 % done #> start of time step: 6 #> end of time step: 6 #> 0.049 secs remaining (estimate) #> 60 % done #> start of time step: 7 #> end of time step: 7 #> 0.035 secs remaining (estimate) #> 70 % done #> start of time step: 8 #> end of time step: 8 #> 0.023 secs remaining (estimate) #> 80 % done #> start of time step: 9 #> end of time step: 9 #> 0.011 secs remaining (estimate) #> 90 % done #> start of time step: 10 #> end of time step: 10 #> 0 secs remaining (estimate) #> 100 % done #> Simulation: 'example_simulation' finished #> Exiting the Simulation #> Runtime: 0.15 secs # define a nice color palette plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(     sim,     obj = \"species_1\",     name = \"abundance\",     main = \"Species 1: abundance\",     col = plot_cols ) plot(     sim$species_2,     trait = \"abundance\",     main = \"Species 2: abundance\",     col = plot_cols )"},{"path":"https://metaRange.github.io/metaRange/articles/A03_niche_suitability.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"03: Niche suitability","text":"Yin, X., Kropff, M.J., McLaren, G., Visperas, R.M., (1995) nonlinear model crop development function temperature, Agricultural Forest Meteorology, Volume 77, Issues 1-2, Pages 1–16, doi:10.1016/0168-1923(95)02236-Q Yan, W., Hunt, L.. (1999) Equation Modelling Temperature Response Plants using Cardinal Temperatures, Annals Botany, Volume 84, Issue 5, Pages 607–614, ISSN 0305-7364, doi:10.1006/anbo.1999.0955","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A04_dispersal.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"04: Dispersal","text":"First, load necessary packages create example landscape. set basic simulation two identical species. Now add two methods dispersal two species highlight difference.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 set_verbosity(2)  raster_file <- system.file(\"ex/elev.tif\", package = \"terra\") r <- rast(raster_file) temperature <- scale(r, center = FALSE, scale = TRUE) * 10 + 273.15 temperature <- rep(temperature, 10) landscape <- sds(temperature) names(landscape) <- c(\"temperature\") sim <- create_simulation(landscape) #> number of time steps: 10 #> time step layer mapping: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> added environment #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : temperature #>  #> created simulation: simulation_7d66898b sim$add_species(\"species_1\") #> adding species #> Name: species_1 sim$add_species(\"species_2\") #> adding species #> Name: species_2 sim$add_traits(     species = c(\"species_1\", \"species_2\"),     abundance = 100,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000 ) #> adding traits: #> [1] \"abundance\"           \"climate_suitability\" \"reproduction_rate\"   #> [4] \"carrying_capacity\" #>  #> to species: #> [1] \"species_1\" \"species_2\" #>  sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 288,     min_temperature = 280,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 7,         kfun = negative_exponential_function,         mean_dispersal_dist = 4     ) ) #> adding traits: #> [1] \"max_temperature\"     \"optimal_temperature\" \"min_temperature\"     #> [4] \"dispersal_kernel\" #> to species: #> [1] \"species_1\" \"species_2\" #>  sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             )     },     execution_priority = 1 ) #> adding process: calculate_suitability #> to species: #> [1] \"species_1\" \"species_2\" #>  sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate * self$traits$climate_suitability,                 self$traits$carrying_capacity * self$traits$climate_suitability             )     },     execution_priority = 2 ) #> adding process: reproduction #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A04_dispersal.html","id":"unweighted-dispersal","dir":"Articles","previous_headings":"","what":"Unweighted dispersal","title":"04: Dispersal","text":"","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 3 ) #> adding process: dispersal_process #> to species: #> [1] \"species_1\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A04_dispersal.html","id":"weighted-dispersal","dir":"Articles","previous_headings":"","what":"Weighted dispersal","title":"04: Dispersal","text":"","code":"sim$add_process(     species = \"species_2\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]],             weights = self$traits[[\"climate_suitability\"]]         )     },     execution_priority = 3 ) #> adding process: dispersal_process #> to species: #> [1] \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/A04_dispersal.html","id":"comparison-of-the-results","dir":"Articles","previous_headings":"","what":"Comparison of the results","title":"04: Dispersal","text":"see effect, run simulation 10 time steps plot results. Figure 2: Resulting abundance species 1 (unweighted dispersal) 10 time steps. Figure 3: Resulting abundance species 2 (weighted dispersal) 10 time steps. Note plot species two less “blurry” different scales two plots. first species looses individuals dispersing unsuitable habitat, second species can keep much larger population size, moving towards suitable habitat dispersal.","code":"set_verbosity(0) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/A04_dispersal.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"04: Dispersal","text":"Nathan, R., Klein, E., Robledo-Arnuncio, J.J. Revilla, E. (2012) Dispersal kernels: review. : Dispersal Ecology Evolution pp. 187–210. (eds J. Clobert, M. Baguette, T.G. Benton J.M. Bullock), Oxford, UK: Oxford Academic, 2013. doi:10.1093/acprof:oso/9780199608898.003.0015","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A05_species_interactions.html","id":"competition","dir":"Articles","previous_headings":"","what":"Competition","title":"05: Species interactions","text":"process simulates competition two species reduce carrying capacity one species based abundance species. simplicity, assume asymmetric competition, species 1 superior competitor. Therefore, reduce carrying capacity species 2 based abundance species 1. Note happens reproduction process, carrying capacity reduced next time step, current one. One change changing execution priority competition process.  can see, species 2 pushed preferred habitat, towards areas unsuitable species 1.","code":"sim$add_process(     species = \"species_2\",     process_name = \"competition\",     process_fun = function() {         max_capacity <- max(self$traits$carrying_capacity)         self$traits$carrying_capacity <-             pmax(max_capacity - self$sim$species_1$traits$abundance, 0)     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/A05_species_interactions.html","id":"trophic-interactions","dir":"Articles","previous_headings":"","what":"Trophic interactions","title":"05: Species interactions","text":"can also add process simulates trophic interactions form predation. Assuming species 2 predator species 1 prey, means species 2 reduce abundance species 1, can occur areas species 1. use similar setup , slightly adjusted values: Now can add process simulates predation. Note predation effectiveness dependent climate suitability predator.  Note species 2 occupies areas species 1 despite completely different climatic niche. Reminder: species_1 species_2","code":"sim <- create_simulation(landscape) sim$add_species(name = \"species_1\") sim$add_species(name = \"species_2\")  sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 10000,     climate_suitability = 1,     reproduction_rate = 0.5,     carrying_capacity = 10000 ) sim$add_traits(     species = \"species_2\",     population_level = TRUE,     abundance = 500,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000 ) sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 3,         kfun = negative_exponential_function,         mean_dispersal_dist = 1     ) ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 290,     min_temperature = 270,     max_precipitation = 1000,     optimal_precipitation = 800,     min_precipitation = 0 ) sim$add_traits(     species = \"species_2\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 270,     min_temperature = 260,     max_precipitation = 1000,     optimal_precipitation = 300,     min_precipitation = 0 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate * self$traits$climate_suitability,                 self$traits$carrying_capacity * self$traits$climate_suitability             )     },     execution_priority = 2 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 3 ) sim$add_globals(trophic_conversion_factor = 0.5) sim$add_process(     species = \"species_2\",     process_name = \"predation\",     process_fun = function() {         self$traits$abundance <-             self$sim$species_1$traits$abundance *             self$traits$climate_suitability *             self$sim$globals$trophic_conversion_factor          self$sim$species_1$traits$abundance <-             self$sim$species_1$traits$abundance -             self$sim$species_1$traits$abundance *             self$traits$climate_suitability     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols) max_temperature = 300 optimal_temperature = 290 min_temperature = 270 max_precipitation = 1000 optimal_precipitation = 800 min_precipitation = 0 max_temperature = 300 optimal_temperature = 270 min_temperature = 260 max_precipitation = 1000 optimal_precipitation = 300 min_precipitation = 0"},{"path":"https://metaRange.github.io/metaRange/articles/A05_species_interactions.html","id":"final-notes","dir":"Articles","previous_headings":"","what":"Final notes","title":"05: Species interactions","text":"tutorial shows basic options species interactions possible metaRange. One also simulation includes competition predation, different (.e. complex) forms two processes processes e.g. mutualism.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A06_metabolic_scaling.html","id":"calculating-the-normalization-constant","dir":"Articles","previous_headings":"","what":"Calculating the normalization constant","title":"06: Metabolic scaling","text":"absence experimentally measured values normalization constant, metaRange offers function calculate_normalization_constant() calculate normalization constant based estimated value parameter reference temperature.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A06_metabolic_scaling.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"06: Metabolic scaling","text":"Define basic traits. Add parameter used metabolic scaling global variables, since species specific. Add traits used reproduction model including estimate reproduction rate carrying capacity. Calculate normalization constant, based parameter estimate optimal temperature species. Note also done loop multiple species. Add process metabolic scaling time step. point, processes added use scaled parameters (See previous articles / vignettes). just plot scaled parameter instead.  Note results show “everything else equal” scenario, variable temperature. realistic scenario, suitability habitat might also influence reproduction rate carrying capacity mean individual body mass might change temperature change results.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 set_verbosity(0)  raster_file <- system.file(\"ex/elev.tif\", package = \"terra\") r <- rast(raster_file) temperature <- scale(r, center = FALSE, scale = TRUE) * 10 + 273.15 precipitation <- r * 2 temperature <- rep(temperature, 10) precipitation <- rep(precipitation, 10) landscape <- sds(temperature, precipitation) names(landscape) <- c(\"temperature\", \"precipitation\")  sim <- create_simulation(landscape) sim$add_species(name = \"species_1\") sim$add_traits(     species = \"species_1\",     population_level = FALSE,     temperature_maximum = 300,     temperature_optimum = 288,     temperature_minimum = 280 ) sim$add_globals(     \"E_reproduction_rate\" = -0.65,     \"E_carrying_capacity\" = 0.65,     \"exponent_reproduction_rate\" = -1 / 4,     \"exponent_carrying_capacity\" = -3 / 4,     \"k\" = 8.617333e-05 ) sim$add_traits(     species = \"species_1\",     population_level = TRUE,     \"abundance\" = 100,     \"reproduction_rate\" = 0.5,     \"carrying_capacity\" = 1000,     \"mass\" = 1 ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     \"reproduction_rate_mte_constant\" = calculate_normalization_constant(         parameter_value = sim$species_1$traits[[\"reproduction_rate\"]][[1]],         scaling_exponent = sim$globals[[\"exponent_reproduction_rate\"]],         mass = sim$species_1$traits[[\"mass\"]][[1]],         reference_temperature = sim$species_1$traits[[\"temperature_optimum\"]],         E = sim$globals[[\"E_reproduction_rate\"]],         k = sim$globals[[\"k\"]]     ),     \"carrying_capacity_mte_constant\" = calculate_normalization_constant(         parameter_value = sim$species_1$traits[[\"carrying_capacity\"]][[1]],         scaling_exponent = sim$globals[[\"exponent_carrying_capacity\"]],         mass = sim$species_1$traits[[\"mass\"]][[1]],         reference_temperature = sim$species_1$traits[[\"temperature_optimum\"]],         E = sim$globals[[\"E_carrying_capacity\"]],         k = sim$globals[[\"k\"]]     ) ) sim$add_process(     species = \"species_1\",     process_name = \"mte\",     process_fun = function() {         self$traits[[\"reproduction_rate\"]] <- metabolic_scaling(             normalization_constant = self$traits[[\"reproduction_rate_mte_constant\"]],             scaling_exponent = self$sim$globals[[\"exponent_reproduction_rate\"]],             mass = self$traits[[\"mass\"]],             temperature = self$sim$environment$current[[\"temperature\"]],             E = self$sim$globals[[\"E_reproduction_rate\"]],             k = self$sim$globals[[\"k\"]]         )          self$traits[[\"carrying_capacity\"]] <- metabolic_scaling(             normalization_constant = self$traits[[\"carrying_capacity_mte_constant\"]],             scaling_exponent = self$sim$globals[[\"exponent_carrying_capacity\"]],             mass = self$traits[[\"mass\"]],             temperature = self$sim$environment$current[[\"temperature\"]],             E = self$sim$globals[[\"E_carrying_capacity\"]],             k = self$sim$globals[[\"k\"]]         )     },     execution_priority = 2 ) sim$set_time_layer_mapping(c(1, 2)) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"reproduction_rate\", col = plot_cols, main = \"Reproduction rate\") plot(sim, \"species_1\", \"carrying_capacity\", col = plot_cols, main = \"Carrying capacity\")"},{"path":"https://metaRange.github.io/metaRange/articles/A06_metabolic_scaling.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"06: Metabolic scaling","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004). Toward Metabolic Theory Ecology. Ecology, 85: 1771-1789. doi:10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012). Introduction: Metabolism Basis Theoretical Unification Ecology. : Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown). doi:10.1002/9781119968535.ch","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A07_age_structured_populations.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"07: Age structured populations","text":"Setup basic simulation.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 raster_file <- system.file(\"ex/elev.tif\", package = \"terra\") r <- rast(raster_file) habitat <- scale(r, center = FALSE, scale = TRUE) habitat <- rep(habitat, 10) landscape <- sds(habitat) names(landscape) <- c(\"habitat\") sim <- create_simulation(landscape) sim$add_species(\"species_1\")"},{"path":"https://metaRange.github.io/metaRange/articles/A07_age_structured_populations.html","id":"traits","dir":"Articles","previous_headings":"","what":"Traits","title":"07: Age structured populations","text":"Now add traits juveniles adults.","code":"sim$add_traits(     species = \"species_1\",     n_juveniles = 100,     n_adults = 100,     mortality_juveniles = 0.1,     mortality_adults = 0.7,     reproduction_rate = 2 ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 8,         kfun = negative_exponential_function,         mean_dispersal_dist = 4     ) )"},{"path":"https://metaRange.github.io/metaRange/articles/A07_age_structured_populations.html","id":"processes","dir":"Articles","previous_headings":"","what":"Processes","title":"07: Age structured populations","text":"Now add processes manage transition age classes.","code":"sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <-             self$traits[[\"n_adults\"]] + (                 self$traits[[\"n_adults\"]] * self$traits[[\"reproduction_rate\"]]             ) * self$sim$environment$current$habitat     },     execution_priority = 1 ) sim$add_process(     species = \"species_1\",     process_name = \"maturation\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] +             self$traits[[\"n_juveniles\"]] * (1 - self$traits[[\"mortality_juveniles\"]])     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/A07_age_structured_populations.html","id":"more-processes","dir":"Articles","previous_headings":"","what":"More processes","title":"07: Age structured populations","text":"dispersal mortality. note need add mortality_of_juveniles process, since mortality already included maturation process.","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_of_juveniles\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <- dispersal(             abundance = self$traits[[\"n_juveniles\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 2 ) sim$add_process(     species = \"species_1\",     process_name = \"mortality_of_adults\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] * (1 - self$traits[[\"mortality_adults\"]])     },     execution_priority = 4 )"},{"path":"https://metaRange.github.io/metaRange/articles/A07_age_structured_populations.html","id":"result","dir":"Articles","previous_headings":"","what":"Result","title":"07: Age structured populations","text":"Lastly, add process reports numbers adults juveniles time, can execute simulation plot results.","code":"sim$add_globals(n_juveniles = c(), n_adults = c()) sim$add_process(     process_name = \"logger\",     process_fun = function() {         self$globals$n_juveniles <-             c(self$globals$n_juveniles, sum(self$species_1$traits[[\"n_juveniles\"]]))         self$globals$n_adults <-             c(self$globals$n_adults, sum(self$species_1$traits[[\"n_adults\"]]))     },     execution_priority = 5 ) sim$begin() plot(     1:10,     sim$globals$n_juveniles,     col = \"darkred\",     type = \"l\",     lwd = 2,     ylim = c(0, max(sim$globals$n_juveniles, sim$globals$n_adults)),     xlab = \"Time\",     ylab = \"Number of individuals\",     cex.lab = 0.7,     cex.axis = 0.7 ) lines(1:10, sim$globals$n_adults, col = \"darkblue\", lwd = 2) legend(     \"topleft\",     legend = c(\"juveniles\", \"adults\"),     col = c(\"darkred\", \"darkblue\"),     lty = 1,     lwd = 2,     cex = 0.7 )"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"time-layer-mapping","dir":"Articles","previous_headings":"","what":"Time layer mapping","title":"08: Advanced options","text":"setup processing environmental SDS can take quite time, especially environmental data large. order save user time, method set_time_layer_mapping() allows user define custom mapping time steps layers environmental raster. Use cases may : environment static undergo change, user may want use environmental raster layer time steps. Shortening lengthening number time steps simulation. Using “burn-” period simulation, main simulation begins. usually done let simulation state reach (semi) equilibrium state, simulation objectives can studied.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"default-mapping","dir":"Articles","previous_headings":"Time layer mapping","what":"Default mapping","title":"08: Advanced options","text":"default configuration layer environment represents one time step simulation. .e:","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 raster_file <- system.file(\"ex/elev.tif\", package = \"terra\") r <- rast(raster_file) temperature <- scale(r, center = FALSE, scale = TRUE) * 10 + 273.15 precipitation <- r * 2 temperature <- rep(temperature, 10) precipitation <- rep(precipitation, 10) landscape <- sds(temperature, precipitation) names(landscape) <- c(\"temperature\", \"precipitation\") sim <- create_simulation(landscape) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"static-environment","dir":"Articles","previous_headings":"Time layer mapping","what":"Static environment","title":"08: Advanced options","text":"use environmental raster (.e. first one) time steps, one can use:","code":"sim$set_time_layer_mapping(rep_len(1, 10)) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"changing-the-number-of-time-steps","dir":"Articles","previous_headings":"Time layer mapping","what":"Changing the number of time steps","title":"08: Advanced options","text":"way described , one can also pick specific layer used shorten simulation length.","code":"sim$set_time_layer_mapping(c(2, 4, 6)) sim$number_time_steps #> [1] 3 sim$time_step_layer #> [1] 2 4 6"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"burn-in-period","dir":"Articles","previous_headings":"Time layer mapping","what":"Burn-in period","title":"08: Advanced options","text":"add burn-period 10 time steps, environmental data updated, one use function follows:","code":"sim$set_time_layer_mapping(c(rep_len(1, 10), 2:10)) sim$number_time_steps #> [1] 19 sim$time_step_layer #>  [1]  1  1  1  1  1  1  1  1  1  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"global-variables-and-processes","dir":"Articles","previous_headings":"","what":"Global variables and processes","title":"08: Advanced options","text":"metaRange uses object orient programming paradigm, means species described biologically relevant processes traits. However, may cases user wants define global variable process shared species, store intermediate results don’t belong one species processes visualize store output. can done using add_globals() function adding global variables add_process() function species argument specified, adding global processes. global variables processes accessible globalsand processes field simulation object , respectively. benefit using global process self keyword refers simulation object , allows easier indexing across multiple species.","code":"sim$add_species(\"species_one\") sim$add_species(\"species_two\") sim$add_globals(     mean_abundance_over_time = list(         \"species_one\" = c(),         \"species_two\" = c()     )     # ... more global variables ) sim$globals$global_var #> NULL sim$add_process(     # Note the missing species argument     process_name = \"global_process\",     process_fun = function() {         # self = simulation object         # easy access to simulation functions         for (sp in self$species_names()) {             self$globals$mean_abundance_over_time[[sp]] <-                 c(                     self$globals$mean_abundance_over_time[[sp]],                     mean(self[[sp]]$traits$abundance)                 )         }     },     execution_priority = 1 ) sim$processes$global_process #> Process name:  global_process  #> PID:  PID-147a3ef391-global_process  #> execution_priority:  1  #> execution_environment_label:  simulation_3f8e1964  #> $fun: function() { #>         # self = simulation object #>         # easy access to simulation functions #>         for (sp in self$species_names()) { #>             self$globals$mean_abundance_over_time[[sp]] <- #>                 c( #>                     self$globals$mean_abundance_over_time[[sp]], #>                     mean(self[[sp]]$traits$abundance) #>                 ) #>         } #>     } #> <environment: 0x0000024a91fa1298>"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"interaction-with-the-priority-queue","dir":"Articles","previous_headings":"","what":"Interaction with the priority queue","title":"08: Advanced options","text":"specific study questions, may desired simulate species first time step. example, simulation invasion dynamics, one may want burn-period without invasive species present introduce point. hand, may need simulate species specific time period remove simulation (e.g. point calculating reproduction species gone extinct). accommodate , metaRange allows user manually add remove processes priority queue simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"queuing-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Queuing a process","title":"08: Advanced options","text":"default behavior add_process() immediately add process priority queue. Setting argument queue = FALSE add process simulation, priority queue. case, user point simulation option add process priority queue using enqueue() method priority queue.","code":"sim <- create_simulation(landscape) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1,     # Note the queue = FALSE argument     queue = FALSE ) sim$add_process(     process_name = \"activate_species_1\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         # Note that when manually changing the queue,         # the changes will take place in the         # _next_ time step         # e.g. the following will lead to the process         # being first executed in time step 4)         if (self$get_current_time_step() == 3) {             message(\"Activating species 1\")             for (pr in self$species_1$processes) {                 self$queue$enqueue(pr)             }         }     },     execution_priority = 1 ) sim$begin() #> time step: 1 #> time step: 2 #> time step: 3 #> Activating species 1 #> time step: 4 #> Species invades! #> time step: 5 #> Species invades! #> time step: 6 #> Species invades!"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"dequeue-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Dequeue a process","title":"08: Advanced options","text":"dequeue() function priority queue allows user remove process priority queue.","code":"sim <- create_simulation(landscape) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"stop_invasion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 3) {             message(\"Extiction species 1\")             for (pr in self$species_1$processes) {                 # Here we are querying the process ID,                 # which is a unique identifier for each process                 # so that the priority queue knows what to remove                 self$queue$dequeue(pr$get_PID())             }         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Extiction species 1 #> time step: 4 #> time step: 5 #> time step: 6"},{"path":"https://metaRange.github.io/metaRange/articles/A08_advanced_options.html","id":"ending-the-simulation-early","dir":"Articles","previous_headings":"","what":"Ending the simulation early","title":"08: Advanced options","text":"end simulation safely, last time step, user can use exit() method simulation. end simulation end process called inside . possible use case conditionally end simulation species extinct.","code":"sim <- create_simulation(landscape) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"end_simualtion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 4) {             message(\"Ending simulation early\")             self$exit()         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Species invades! #> time step: 4 #> Ending simulation early"},{"path":"https://metaRange.github.io/metaRange/articles/A09_troubleshooting_and_caveats.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"09: Troubleshooting / caveats","text":"following code result error: immediately obvious problem . first step narrow problem enable extensive verbosity. , run code , time set_verbosity(2), get following output: can see error occurs first time step, reproduction process “species_1”. information, can now insert browser() function step code inspect process find source error. browser, conceptually inside reproduction process “species_1”. mean can make use self keyword inspect state species. first step, might want call ls() see objects can inspect. Since error wrong type passed reproduction function, can inspect traits species see types expect . means can just type self$traits console see may notice reproduction_rate misspelled reproduction_rtae. can now quit browser typing Q Enter console proceed fix typo. Also, can remove browser() call code, needed anymore.","code":"library(metaRange) #> metaRange version: 1.0.1 library(terra) #> terra 1.7.55 set_verbosity(0) raster_file <- system.file(\"ex/elev.tif\", package = \"terra\") r <- rast(raster_file) r <- scale(r, center = FALSE, scale = TRUE) r <- rep(r, 10) landscape <- sds(r) names(landscape) <- c(\"habitat_quality\")  sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 )  sim$add_species(name = \"species_1\") sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 100,     reproduction_rtae = 0.5,     carrying_capacity = 1000 ) sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         ricker_reproduction_model(             self$traits$abundance,             self$traits$reproduction_rate,             self$traits$carrying_capacity * self$sim$environment$current$habitat_quality         )     },     execution_priority = 1 ) sim$begin() #> Error in eval(expr, envir, enclos): Not compatible with requested type: [type=NULL; target=double]. set_verbosity(2)  sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 ) #> number of time steps: 10 #> time step layer mapping: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> added environment #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 90, 95 (nrow, ncol) #> nlyr        : 10  #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory  #> names       : habitat_quality #>  #> created simulation: example_simulation  sim$add_species(name = \"species_1\") #> adding species #> Name: species_1 sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 100,     reproduction_rtae = 0.5,     carrying_capacity = 1000 ) #> adding traits: #> [1] \"abundance\"         \"reproduction_rtae\" \"carrying_capacity\" #>  #> to species: #> [1] \"species_1\" #>  sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         ricker_reproduction_model(             self$traits$abundance,             self$traits$reproduction_rate,             self$traits$carrying_capacity * self$sim$environment$current$habitat_quality         )     },     execution_priority = 1 ) #> adding process: reproduction #> to species: #> [1] \"species_1\" #>  sim$begin() #> Starting simualtion. #> passed initial sanity checks. #> start of time step: 1 #> |- species_1 : reproduction #> Error in eval(expr, envir, enclos): Not compatible with requested type: [type=NULL; target=double]. set_verbosity(2)  sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1 )  sim$add_species(name = \"species_1\") sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 100,     reproduction_rtae = 0.5,     carrying_capacity = 1000 ) sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         browser()          ricker_reproduction_model(             self$traits$abundance,             self$traits$reproduction_rate,             self$traits$carrying_capacity * self$sim$environment$current$habitat_quality         )     },     execution_priority = 1 ) sim$begin() # type this in the console, # once the browser has halted the code execution ls() #> [1] \"initialize\" \"name\"       \"print\"      \"processes\"  \"sim\"        #> [6] \"traits\" # type this in the console, # once the browser has halted the code execution self$traits #> abundance :  num [1:90, 1:95] 100 100 100 100 100 100 100 100 100 100 ... #> carrying_capacity :  num [1:90, 1:95] 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 ... #> reproduction_rtae :  num [1:90, 1:95] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ..."},{"path":"https://metaRange.github.io/metaRange/articles/A09_troubleshooting_and_caveats.html","id":"general-caveats","dir":"Articles","previous_headings":"","what":"General caveats","title":"09: Troubleshooting / caveats","text":"metaRange can used simulate wide range scenarios, caveats keep mind. Different scales environment species Since size resolution environment also describes spatial size population (.e. one grid cell = one population), important choose scales appropriate species. especially important keep mind simulating multiple species, since may different spatial requirements. Evolution gene flow planned future versions, metaRange currently support evolution gene flow. Spatial distortion Since metaRange uses raster data represent environment, important keep mind raster 2D representation 3D world. larger geographic extent environment, distorted raster (also depending one map projection resolution).","code":""},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"time-layer-mapping","dir":"Articles","previous_headings":"","what":"Time layer mapping","title":"02: Advanced setup","text":"setup processing environmental SDS can take quite time, especially environmental data large. order save user time, method set_time_layer_mapping() allows user define custom mapping time steps layers environmental raster. Use cases may : Using “burn-” period simulation, main simulation begins. usually done let simulation state reach (semi) equilibrium state, simulation objectives can studied. environment static doesn’t undergo change, user may want use environmental raster layer time steps. Shortening lengthening number time steps simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"default-mapping","dir":"Articles","previous_headings":"Time layer mapping","what":"Default mapping","title":"02: Advanced setup","text":"default configuration layer environment represents one time step simulation. .e:","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"burn-in-period","dir":"Articles","previous_headings":"Time layer mapping","what":"Burn-in period","title":"02: Advanced setup","text":"add burn-period 10 time steps, environmental data updated, one use function follows:","code":"sim$set_time_layer_mapping(c(rep_len(1, 10), 2:10)) sim$number_time_steps #> [1] 19 sim$time_step_layer #>  [1]  1  1  1  1  1  1  1  1  1  1  2  3  4  5  6  7  8  9 10"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"static-environment","dir":"Articles","previous_headings":"Time layer mapping","what":"Static environment","title":"02: Advanced setup","text":"use environmental raster (.e. first one) time steps, one can use:","code":"sim$set_time_layer_mapping(rep_len(1, 10)) sim$number_time_steps #> [1] 10 sim$time_step_layer #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"changing-the-number-of-time-steps","dir":"Articles","previous_headings":"Time layer mapping","what":"Changing the number of time steps","title":"02: Advanced setup","text":"way described , one can also pick specific layer used use shorten simulation length.","code":"sim$set_time_layer_mapping(c(2, 4, 6)) sim$number_time_steps #> [1] 3 sim$time_step_layer #> [1] 2 4 6"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"global-variables-and-processes","dir":"Articles","previous_headings":"","what":"Global variables and processes","title":"02: Advanced setup","text":"metaRange uses object orient programming paradigm, means species described biologically relevant processes traits. However, may cases user wants define global variable process shared species, store intermediate results don’t belong one species processes visualize store output. can done using add_globals() function adding global variables add_process() function species argument specified, adding global processes. global variables processes accessible globalsand processes field simulation object , respectively. benefit using global process self keyword refers simulation object , allows easier indexing across multiple species.","code":"sim$add_globals(     global_var = 1     # ... more global variables ) sim$globals$global_var #> [1] 1 sim$add_process(     # Note the missing species argument     process_name = \"global_process\",     process_fun = function() {         # self = simulation object         self$globals         # easy access to simulation functions         self$species_names() # no species yet     },     execution_priority = 1 ) sim$processes$global_process #> Process name:  global_process  #> PID:  PID-127d751e71-global_process  #> execution_priority:  1  #> execution_environment_label:  simulation_192951c9  #> $fun: function() { #>         # self = simulation object #>         self$globals #>         # easy access to simulation functions #>         self$species_names() # no species yet #>     } #> <environment: 0x000002557ed31180>"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"interaction-with-the-priority-queue","dir":"Articles","previous_headings":"","what":"Interaction with the priority queue","title":"02: Advanced setup","text":"specific study questions, may desired simulate species first time step. example, simulation invasion dynamics, one may want burn-period without invasive species present introduce point. hand, may need simulate species specific time period remove simulation (e.g. point calculating reproduction species gone extinct). accommodate , metaRange allows user manually add remove processes priority queue simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"queuing-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Queuing a process","title":"02: Advanced setup","text":"default behavior add_process() immediately add process priority queue. Setting argument queue = FALSE add process simulation, priority queue. case, user point simulation option add process priority queue using enqueue() method priority queue.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1,     # Note the queue = FALSE argument     queue = FALSE ) sim$add_process(     process_name = \"activate_species_1\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         # Note that when manually changing the queue,         # the changes will take place in the         # _next_ time step         # e.g. the following will lead to the process         # being first executed in time step 4)         if (self$get_current_time_step() == 3) {             message(\"Activating species 1\")             for (pr in self$species_1$processes) {                 self$queue$enqueue(pr)             }         }     },     execution_priority = 1 ) sim$begin() #> time step: 1 #> time step: 2 #> time step: 3 #> Activating species 1 #> time step: 4 #> Species invades! #> time step: 5 #> Species invades! #> time step: 6 #> Species invades!"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"dequeue-a-process","dir":"Articles","previous_headings":"Interaction with the priority queue","what":"Dequeue a process","title":"02: Advanced setup","text":"dequeue() function priority queue allows user remove process priority queue.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"stop_invasion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 3) {             message(\"Extiction species 1\")             for (pr in self$species_1$processes) {                 # Here we are querying the process ID,                 # which is a unique identifier for each process                 # so that the priority queue knows what to remove                 self$queue$dequeue(pr$get_PID())             }         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Extiction species 1 #> time step: 4 #> time step: 5 #> time step: 6"},{"path":"https://metaRange.github.io/metaRange/articles/advanced_setup.html","id":"ending-the-simulation-early","dir":"Articles","previous_headings":"","what":"Ending the simulation early","title":"02: Advanced setup","text":"end simulation safely, last time step, user can use exit() method simulation. end simulation end process called inside . possibly use case conditionally end simulation species extinct.","code":"sim <- create_simulation(create_example_landscape()) sim$set_time_layer_mapping(c(1:6)) sim$add_species(name = \"species_1\") sim$add_process(     species = \"species_1\",     process_name = \"invasion\",     process_fun = function() {         message(\"Species invades!\")     },     execution_priority = 1, ) sim$add_process(     process_name = \"end_simualtion\",     process_fun = function() {         message(paste0(\"time step: \", self$get_current_time_step()))         if (self$get_current_time_step() == 4) {             message(\"Ending simulation early\")             self$exit()         }     },     execution_priority = 1 ) sim$begin() #> Species invades! #> time step: 1 #> Species invades! #> time step: 2 #> Species invades! #> time step: 3 #> Species invades! #> time step: 4 #> Ending simulation early"},{"path":"https://metaRange.github.io/metaRange/articles/age-structured-populations.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"06: Age structured populations","text":"Setup basic simulation.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"species_1\")"},{"path":"https://metaRange.github.io/metaRange/articles/age-structured-populations.html","id":"traits","dir":"Articles","previous_headings":"","what":"Traits","title":"06: Age structured populations","text":"Now add traits juveniles adults.","code":"sim$add_traits(     species = \"species_1\",     n_juveniles = 100,     n_adults = 100,     mortality_juveniles = 0.1,     mortality_adults = 0.7,     reproduction_rate = 2 ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 8,         kfun = negative_exponential_function,         mean_dispersal_dist = 4     ) )"},{"path":"https://metaRange.github.io/metaRange/articles/age-structured-populations.html","id":"processes","dir":"Articles","previous_headings":"","what":"Processes","title":"06: Age structured populations","text":"Now add processes manage transition age classes.","code":"sim$add_process(     species = \"species_1\",     process_name = \"reproduction\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <-             self$traits[[\"n_adults\"]] + (                 self$traits[[\"n_adults\"]] * self$traits[[\"reproduction_rate\"]]             ) * self$sim$environment$current$habitat     },     execution_priority = 1 ) sim$add_process(     species = \"species_1\",     process_name = \"getting_older\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] +               self$traits[[\"n_juveniles\"]] * (1 - self$traits[[\"mortality_juveniles\"]])     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/age-structured-populations.html","id":"more-processes","dir":"Articles","previous_headings":"","what":"More processes","title":"06: Age structured populations","text":"dispersal mortality.","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_of_juveniles\",     process_fun = function() {         self$traits[[\"n_juveniles\"]] <- dispersal(             abundance = self$traits[[\"n_juveniles\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 2 ) sim$add_process(     species = \"species_1\",     process_name = \"mortality_of_adults\",     process_fun = function() {         self$traits[[\"n_adults\"]] <-             self$traits[[\"n_adults\"]] * (1 - self$traits[[\"mortality_adults\"]])     },     execution_priority = 4 )"},{"path":"https://metaRange.github.io/metaRange/articles/age-structured-populations.html","id":"result","dir":"Articles","previous_headings":"","what":"Result","title":"06: Age structured populations","text":"Lastly, add process reports numbers adults juveniles time, execute simulation plot results.","code":"sim$add_globals(n_juveniles = c(), n_adults = c()) sim$add_process(     process_name = \"logger\",     process_fun = function() {         self$globals$n_juveniles <-             c(self$globals$n_juveniles, sum(self$species_1$traits[[\"n_juveniles\"]]))         self$globals$n_adults <-             c(self$globals$n_adults, sum(self$species_1$traits[[\"n_adults\"]]))     },     execution_priority = 5 ) sim$begin() plot(     1:10,     sim$globals$n_juveniles,     col = \"darkred\",     type = \"l\",     ylim = c(0, 2000000),     xlab = \"Time\",     ylab = \"Number of individuals\",     cex.lab = 0.7,     cex.axis = 0.7 ) lines(1:10, sim$globals$n_adults, col = \"darkblue\") legend(     \"topright\",     legend = c(\"juveniles\", \"adults\"),     col = c(\"darkred\", \"darkblue\"),     lty = 1,     cex = 0.7 )"},{"path":"https://metaRange.github.io/metaRange/articles/directed_dispersal.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"05: Directed (weighted) dispersal","text":"Setup basic simulation two identical species. Now add two methods dispersal two species highlight difference.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$add_traits(     species = c(\"species_1\", \"species_2\"),     abundance = 100,     climate_suitability = 1 ) sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 288,     min_temperature = 280,     max_precipitation = 1000,     optimal_precipitation = 700,     min_precipitation = 200,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 12,         kfun = negative_exponential_function,         mean_dispersal_dist = 6     ) ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits[[\"abundance\"]] <-             self$traits[[\"abundance\"]] *             self$traits[[\"climate_suitability\"]]     },     execution_priority = 2 )"},{"path":"https://metaRange.github.io/metaRange/articles/directed_dispersal.html","id":"unweighted-dispersal","dir":"Articles","previous_headings":"","what":"Unweighted dispersal","title":"05: Directed (weighted) dispersal","text":"","code":"sim$add_process(     species = \"species_1\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]]         )     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/directed_dispersal.html","id":"weighted-dispersal","dir":"Articles","previous_headings":"","what":"Weighted dispersal","title":"05: Directed (weighted) dispersal","text":"","code":"sim$add_process(     species = \"species_2\",     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]],             weights = self$traits[[\"climate_suitability\"]]         )     },     execution_priority = 3 )"},{"path":"https://metaRange.github.io/metaRange/articles/directed_dispersal.html","id":"comparison-of-the-results","dir":"Articles","previous_headings":"","what":"Comparison of the results","title":"05: Directed (weighted) dispersal","text":"see effect, run simulation 10 time steps plot results.  Note plot species two less “blurry” different scales two plots. first species looses individuals dispersing unsuitable habitat, second species can keep much larger population size, moving towards suitable habitat dispersal.","code":"sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/metabolic_scaling.html","id":"calculating-the-normalization-constant","dir":"Articles","previous_headings":"","what":"Calculating the normalization constant","title":"04: Metabolic scaling","text":"absence experimentally measured values normalization constant, metaRange offers function calculate_normalization_constant() calculate normalization constant based estimated value parameter reference temperature.","code":""},{"path":"https://metaRange.github.io/metaRange/articles/metabolic_scaling.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"04: Metabolic scaling","text":"Setup basic simulation. Define basic traits. Add parameter used metabolic scaling global variables, since species specific. Add traits used reproduction model including estimate reproduction rate carrying capacity. Calculate normalization constant, based parameter estimate optimal temperature species. Note also done loop multiple species. Add process metabolic scaling time step. point, processes added use scaled parameters. just plot scaled parameter instead.  Note results show “everything else equal” scenario, variable temperature. realistic scenario, suitability habitat might also influence reproduction rate carrying capacity mean individual body mass might change temperature change results.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55 sim <- create_simulation(create_example_landscape()) sim$add_species(\"sp1\") sim$add_traits(     species = \"sp1\",     population_level = FALSE,     \"suitability\" = NA_real_,     \"temperature_maximum\" = 30 + 273,     \"temperature_optimum\" = 20 + 273,     \"temperature_minimum\" = 0 + 273,     \"precipitation_maximum\" = 1200,     \"precipitation_optimum\" = 800,     \"precipitation_minimum\" = 0 ) sim$add_globals(     \"E_reproduction_rate\" = -0.65,     \"E_carrying_capacity\" = 0.65,     \"exponent_reproduction_rate\" = -1 / 4,     \"exponent_carrying_capacity\" = -3 / 4,     \"k\" = 8.617333e-05 ) sim$add_traits(     species = \"sp1\",     population_level = TRUE,     \"abundance\" = 100,     \"reproduction_rate\" = 0.5,     \"carrying_capacity\" = 1000,     \"mass\" = 1 ) sim$add_traits(     species = \"sp1\",     population_level = FALSE,     \"reproduction_rate_mte_constant\" = calculate_normalization_constant(         parameter_value =             sim$sp1$traits[[\"reproduction_rate\"]][[1]],         scaling_exponent =             sim$globals[[\"exponent_reproduction_rate\"]],         mass =             sim$sp1$traits[[\"mass\"]][[1]],         reference_temperature =             sim$sp1$traits[[\"temperature_optimum\"]],         E =             sim$globals[[\"E_reproduction_rate\"]],         k =             sim$globals[[\"k\"]]     ),     \"carrying_capacity_mte_constant\" = calculate_normalization_constant(         parameter_value =             sim$sp1$traits[[\"carrying_capacity\"]][[1]],         scaling_exponent =             sim$globals[[\"exponent_carrying_capacity\"]],         mass =             sim$sp1$traits[[\"mass\"]][[1]],         reference_temperature =             sim$sp1$traits[[\"temperature_optimum\"]],         E =             sim$globals[[\"E_carrying_capacity\"]],         k =             sim$globals[[\"k\"]]     ) ) sim$add_process(     species = \"sp1\",     process_name = \"mte\",     process_fun = function() {         self$traits[[\"reproduction_rate\"]] <- metabolic_scaling(             normalization_constant =                 self$traits[[\"reproduction_rate_mte_constant\"]],             scaling_exponent =                 self$sim$globals[[\"exponent_reproduction_rate\"]],             mass =                 self$traits[[\"mass\"]],             temperature =                 self$sim$environment$current[[\"temperature\"]],             E =                 self$sim$globals[[\"E_reproduction_rate\"]],             k =                 self$sim$globals[[\"k\"]]         )          self$traits[[\"carrying_capacity\"]] <- metabolic_scaling(             normalization_constant =                 self$traits[[\"carrying_capacity_mte_constant\"]],             scaling_exponent =                 self$sim$globals[[\"exponent_carrying_capacity\"]],             mass =                 self$traits[[\"mass\"]],             temperature =                 self$sim$environment$current[[\"temperature\"]],             E =                 self$sim$globals[[\"E_carrying_capacity\"]],             k =                 self$sim$globals[[\"k\"]]         )     },     execution_priority = 2 ) sim$set_time_layer_mapping(c(1, 2)) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"sp1\", \"reproduction_rate\", col = plot_cols) plot(sim, \"sp1\", \"carrying_capacity\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/metabolic_scaling.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"04: Metabolic scaling","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004), Toward Metabolic Theory Ecology. Ecology, 85: 1771-1789. https://doi.org/10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012). Introduction: Metabolism Basis Theoretical Unification Ecology. : Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown). https://doi.org/10.1002/9781119968535.ch","code":""},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"setting-up-a-simulation","dir":"Articles","previous_headings":"","what":"Setting up a simulation","title":"01: Introduction to metaRange","text":"Following simple example set simulation metaRange. start, need load package dependencies.","code":"library(metaRange) #> metaRange version: 0.0.0.9000 library(terra) #> terra 1.7.55"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"loading-the-landscape","dir":"Articles","previous_headings":"","what":"Loading the landscape","title":"01: Introduction to metaRange","text":"first step setting simulation loading environment simulation take place. real world, data can obtained variety sources, may include example different climate variables, land cover elevation. simulations expects data SpatRasterDataset (SDS) collection different raster files share extent resolution. sub-dataset SDS represents one environmental variable layer represents one time step simulation. words, metaRange doesn’t simulate environmental conditions , expects user provide environmental data time step. create dataset one can use function terra::sds(). One important note: Since layer represent condition one time step, raster files go SDS need number layer (.e. desired number time steps simulation ). SDS created, individual subdatasets named, since simulation refer . simplify introduction, use randomly generated landscape consisting temperature, precipitation habitat quality data, 10 time steps (layer) (.e. environmental change). interested, can find code generate landscape end vignette, otherwise ’s enough know throughout tutorial create_example_landscape() create landscape. Figure 3: temperature example landscape. first layer 10 identical ones shown. Figure 4: precipitation example landscape. first layer 10 identical ones shown. Figure 5: habitat quality example landscape. first layer 10 identical ones shown.","code":"landscape <- create_example_landscape() landscape #> class       : SpatRasterDataset  #> subdatasets : 3  #> dimensions  : 100, 100 (nrow, ncol) #> nlyr        : 10, 10, 10  #> resolution  : 1, 1  (x, y) #> extent      : 0, 100, 0, 100  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory  #> names       : temperature, precipitation, habitat terra::plot(     landscape$temperature[[1]],     col = hcl.colors(100, \"Geyser\"),     main = \"Temperature [K]\") terra::plot(     landscape$precipitation[[1]],     col = hcl.colors(100, \"GnBu\", rev = TRUE),     main = \"Precipitation [mm]\") terra::plot(     landscape$habitat[[1]],     main = \"Habitat quality [0-1]\")"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"pre-setup","dir":"Articles","previous_headings":"","what":"Pre-setup","title":"01: Introduction to metaRange","text":"creating simulation, may helpful enable extensive reporting, print lot information time metaRange function called. can enabled disabled time (.e. also simulation running), order highlight function call tutorial , enable beginnig setup.","code":"# 0 = no reporting # 1 = a bit of info # 2 = very verbose set_verbosity(2)"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"creating-the-simulation","dir":"Articles","previous_headings":"","what":"Creating the simulation","title":"01: Introduction to metaRange","text":"landscape loaded, simulation can created using create_simulation() function. required argument source_environment landscape / environment SDS created first step. One can optionally specify ID simulation seed random number generator. want inspect simulation object, can either print , lists fields methods use summary() function get overview simulation state.","code":"sim <- create_simulation(     source_environment = landscape,     ID = \"example_simulation\",     seed = 1) #> number of time steps: 10 #> time step layer mapping: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> added environment #> class       : SpatRasterDataset  #> subdatasets : 3  #> dimensions  : 100, 100 (nrow, ncol) #> nlyr        : 10, 10, 10  #> resolution  : 1, 1  (x, y) #> extent      : 0, 100, 0, 100  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory  #> names       : temperature, precipitation, habitat #>  #> created simulation: example_simulation sim #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary() summary(sim) #> ID: example_simulation  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 3  #> dimensions  : 100, 100 (nrow, ncol) #> nlyr        : 10, 10, 10  #> resolution  : 1, 1  (x, y) #> extent      : 0, 100, 0, 100  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory  #> names       : temperature, precipitation, habitat  #> Time step layer mapping:  1 2 3 4 5 6 7 8 9 10  #> Current time step:  1  #> Seed:  1  #> Species: #>    #> Simulation level processes: #> NULL #> Gobal variables: #> NULL #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"adding-species-to-the-simulation","dir":"Articles","previous_headings":"","what":"Adding species to the simulation","title":"01: Introduction to metaRange","text":"simulation created, species can added using add_species() function. point one switch earlier mentioned R6 syntax. means add_species() method simulation object can called using $ operator (.e. indexing simulation object calling function stored inside ). required argument name name species added. species can now accessed using $ operator . want add species, can just repeat add_species() call. point wondering , many species simulation, can use species_names() method.","code":"sim$add_species(name = \"species_1\") #> adding species #> Name: species_1 sim$species_1 #> Species:  species_1  #> processes:  #> NULL #> traits:  #> character(0) sim$add_species(name = \"species_2\") #> adding species #> Name: species_2 sim$species_names() #> [1] \"species_2\" \"species_1\""},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"adding-traits-to-species","dir":"Articles","previous_headings":"","what":"Adding traits to species","title":"01: Introduction to metaRange","text":"species added simulation, traits can asigned using add_traits() method. function able add (multiple) traits multiple species , useful setting large number species traits. first argument species character vector species names trait assigned . second argument population_level, decides “level” trait added. TRUE, trait expanded fill whole landscape (.e. one value per population). following arguments can supplied form trait_name = trait_value. traits may require stored population level, e.g. property species whole. case, population_level can set FALSE trait added -, without processing. example assume species dispersal kernel constant whole landscape (.e. population). case one unfamiliar concept dispersal kernels, good introduction “Nathan, R., Klein, E., Robledo-Arnuncio, J.J. & Revilla, E. (2012) Dispersal kernels: review” [Ref. 1], basic level, dispersal kernel matrix describes dispersal probability source population surrounding habitat. can use function calculate_dispersal_kernel() create dispersal kernel add species. Note can call calculate_dispersal_kernel() directly add_traits() call. Assuming interested find two species inhabit landscape, can give different environmental preferences two envionmental variables simulation environment (temperature & precipitation). Note names traits arbitrary can chosen user predetermined connection e.g. “min_temperature” temperature variable environment. responsibility species processes (therfore user) access correct traits use correct way, meaningfull trait names important.","code":"sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = TRUE,     abundance = 500,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000     # ...     # Note that here could be more traits, there is no limit ) #> adding traits: #> [1] \"abundance\"           \"climate_suitability\" \"reproduction_rate\"   #> [4] \"carrying_capacity\" #>  #> to species: #> [1] \"species_1\" \"species_2\" #> sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         # in grid cells         max_dispersal_dist = 3,         # the function to use to calculate the kernel values         kfun = negative_exponential_function,         # in grid cells         mean_dispersal_dist = 1     ) ) #> adding traits: #> [1] \"dispersal_kernel\" #>  #> to species: #> [1] \"species_1\" \"species_2\" #> sim$add_traits(     species = \"species_1\",     population_level = FALSE,     max_temperature = 300, # Kelvin     optimal_temperature = 288,     min_temperature = 280,     max_precipitation = 1000, # mm     optimal_precipitation = 700,     min_precipitation = 200 ) #> adding traits: #> [1] \"max_temperature\"       \"optimal_temperature\"   \"min_temperature\"       #> [4] \"max_precipitation\"     \"optimal_precipitation\" \"min_precipitation\" #>  #> to species: #> [1] \"species_1\" #>  sim$add_traits(     species = \"species_2\",     population_level = FALSE,     max_temperature = 290,     optimal_temperature = 285,     min_temperature = 270,     max_precipitation = 1000,     optimal_precipitation = 500,     min_precipitation = 0 ) #> adding traits: #> [1] \"max_temperature\"       \"optimal_temperature\"   \"min_temperature\"       #> [4] \"max_precipitation\"     \"optimal_precipitation\" \"min_precipitation\" #> to species: #> [1] \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"adding-processes","dir":"Articles","previous_headings":"","what":"Adding processes","title":"01: Introduction to metaRange","text":"species traits added, processes describe species interaction environment can added, using add_processes() method. arguments : species character vector species get process, process_name human readable name process process_fun function executed process called. One argument might confusing execution_priority. number gives process priority “weight” decides order processes executed within one time step. smaller number, earlier process executed (e.g. 1 gets executed 2). case two processes priority, assumed independent execution order doesn’t matter. executed alphabetical order. (Technical note: Don’t count behavior, may change future. Equal priority means matter order executed). example first add three basic processes species, one estimating suitability habitat cell, one calculates population growth one describes dispersal. calculate suitability, use metaRange function calculate_suitability() adapted formula published Yin et al. 1995 [Ref. 2] simplified Yan Hunt 1999 (eq:4) [Ref. 3]. formula takes three cardinal values environmental niche (minimum tolerable value, optimal vale maximum tolerable value) constructs suitability curve based beta distribution. following code precipitation temperature multiply values get joint suitability two environmental niches. user also define function calculate suitability. Note use self keyword function. context, self refers species process attached . means function can access species traits modify also access environment (species holds reference simulation created ).","code":""},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"suitability","dir":"Articles","previous_headings":"Adding processes","what":"Suitability","title":"01: Introduction to metaRange","text":"","code":"sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 # The following acceses the \"current\" environment                 # of a time step                 # (i.e. from the raster layer, that corresponds                 # to the current time step)                 # For user convenice, this \"current\" environment                 # is converted to a plain matrix,                 # to allow easier calculations                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) #> adding process: calculate_suitability #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"reproduction","dir":"Articles","previous_headings":"Adding processes","what":"Reproduction","title":"01: Introduction to metaRange","text":"reproduction process can use built function ricker_reproduction_model() implements “classic” Ricker reproduction model (Ricker, W.E. (1954) compare also: Cabral, J.S. Schurr, F.M. (2010)) [Ref. 4 & 5].","code":"sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         # first let the carrying capacity         # depend on the climate suitability         self$traits$carrying_capacity <-             self$traits$carrying_capacity *             self$traits$climate_suitability          # let the reproduction rate         # depend on the habitat quality         self$traits$reproduction_rate <-             self$traits$reproduction_rate *             self$sim$environment$current$habitat          # use a ricker reproduction model         # to calculate the new abundance         self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate,                 self$traits$carrying_capacity             )     },     execution_priority = 2 ) #> adding process: reproduction #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"dispersal","dir":"Articles","previous_headings":"Adding processes","what":"Dispersal","title":"01: Introduction to metaRange","text":"apply dispersal kernel abundance species, can use dispersal() function. takes dispersal kernel applies population (grid cell) species returns dispersed abundance. fields process known 2D convolution e.g. used blurring image. Therfore one can think dispersal similar way, “blurring” species abundance landscape. Note can also use [[ indexing access traits species (actually slightly faster $ indexing).","code":"sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]])     },     execution_priority = 3 ) #> adding process: dispersal_process #> to species: #> [1] \"species_1\" \"species_2\" #>"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"executing-the-simulation","dir":"Articles","previous_headings":"","what":"Executing the simulation","title":"01: Introduction to metaRange","text":"species, traits processes added simulation, can executed via begin() method. reduce amount output simulation running, ’ll set verbosity 1.","code":"set_verbosity(1) sim$begin() #> Starting simualtion. #> start of time step: 1 #> end of time step: 1 #> 0.41 secs remaining (estimate) #> 10 % done #> start of time step: 2 #> end of time step: 2 #> 0.58 secs remaining (estimate) #> 20 % done #> start of time step: 3 #> end of time step: 3 #> 0.34 secs remaining (estimate) #> 30 % done #> start of time step: 4 #> end of time step: 4 #> 0.28 secs remaining (estimate) #> 40 % done #> start of time step: 5 #> end of time step: 5 #> 0.22 secs remaining (estimate) #> 50 % done #> start of time step: 6 #> end of time step: 6 #> 0.22 secs remaining (estimate) #> 60 % done #> start of time step: 7 #> end of time step: 7 #> 0.16 secs remaining (estimate) #> 70 % done #> start of time step: 8 #> end of time step: 8 #> 0.1 secs remaining (estimate) #> 80 % done #> start of time step: 9 #> end of time step: 9 #> 0.043 secs remaining (estimate) #> 90 % done #> start of time step: 10 #> end of time step: 10 #> 0 secs remaining (estimate) #> 100 % done #> Simulation: 'example_simulation' finished #> Exiting the Simulation #> Runtime: 0.52 secs"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the results","title":"01: Introduction to metaRange","text":"investigate results, can use plot() function. Note following two functions essentially plot , difference first one calls plot() simulation object second one calls plot() species object Figure 6: resulting abundance distribution species 1 10 simulation time steps. Figure 7: resulting abundance distribution species 2 10 simulation time steps.","code":"# define a nice color palette plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(     sim,     obj = \"species_1\",     name = \"abundance\",     main = \"Species 1: abundance\",     col = plot_cols ) plot(     sim$species_2,     trait = \"abundance\",     main = \"Species 2: abundance\",     col = plot_cols )"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"saving-the-simulation","dir":"Articles","previous_headings":"","what":"Saving the simulation","title":"01: Introduction to metaRange","text":"save results can use save_species() function. save (possibly specified) traits species, either raster (.tif) text (.csv) file, whatever appropriate data. Note function save species processes. One keep copy script used run simulation make repeatable.","code":"save_species(     sim$species_1,     traits = c(\"name\", \"of\", \"one_or_more\", \"traits\"),     path = \"path/to/a/folder/\" )"},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"01: Introduction to metaRange","text":"Nathan, R., Klein, E., Robledo-Arnuncio, J.J. Revilla, E. (2012) Dispersal kernels: review. : Dispersal Ecology Evolution pp. 187–210. (eds J. Clobert, M. Baguette, T.G. Benton J.M. Bullock), Oxford, UK: Oxford Academic, 2013. doi:10.1093/acprof:oso/9780199608898.003.0015 Yin, X., Kropff, M.J., McLaren, G., Visperas, R.M., (1995) nonlinear model crop development function temperature, Agricultural Forest Meteorology, Volume 77, Issues 1-2, Pages 1–16, doi:10.1016/0168-1923(95)02236-Q Yan, W., Hunt, L.. (1999) Equation Modelling Temperature Response Plants using Cardinal Temperatures, Annals Botany, Volume 84, Issue 5, Pages 607–614, ISSN 0305-7364, doi:10.1006/anbo.1999.0955 Ricker, W.E. (1954) Stock recruitment. Journal Fisheries Research Board Canada, 11, 559–623. doi:10.1139/f54-039 Cabral, J.S. Schurr, F.M. (2010) Estimating demographic models range dynamics plant species. Global Ecology Biogeography, 19, 85–97. doi:10.1111/j.1466-8238.2009.00492.x","code":""},{"path":"https://metaRange.github.io/metaRange/articles/metaRange.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"01: Introduction to metaRange","text":"function used generate example landscape.","code":"create_example_landscape <- function() {     set.seed(3)     create_land <- function() {         sample_size <- 100         n_cells <- 100         res <- terra::disagg(             terra::rast(                 matrix(                     sample.int(                         sample_size,                         n_cells,                         replace = TRUE,                         prob = sin(seq(0.05, pi-0.05, length.out = sample_size))                     ),                     nrow = sqrt(n_cells),                     ncol = sqrt(n_cells)                 )             ),             10,             \"bilinear\"         )  / 100         ext(res) <- c(0, 100, 0, 100)         return(res)     }     temperature <- create_land() * 20 + 273.15     temperature <- rep(temperature, 10)     precipitation <- create_land() * 1000     precipitation <- rep(precipitation, 10)     habitat <- create_land()     habitat <- rep(habitat, 10)     landscape <- terra::sds(temperature, precipitation, habitat)     names(landscape) <- c(\"temperature\", \"precipitation\", \"habitat\")     return(landscape) }"},{"path":"https://metaRange.github.io/metaRange/articles/species_interactions.html","id":"competition","dir":"Articles","previous_headings":"","what":"Competition","title":"03: Species interactions","text":"’ll start adding process simulates competition two species. process reduce carrying capacity habitat cell based abundance species. simplicity, ’ll assume asymmetric competition, species 1 superior competitor. Therefore ’ll reduce carrying capacity species 2 based abundance species 1. Note happens reproduction process, carrying capacity reduced next time step, current one. One change changing execution priority competition process.  can see, species 2 able survive habitat unsuitable species 1.","code":"sim$add_process(     species = \"species_2\",     process_name = \"competition\",     process_fun = function() {         self$traits$carrying_capacity <-             self$traits$carrying_capacity - self$sim$species_1$traits$abundance          self$traits$carrying_capacity[self$traits$carrying_capacity < 0] <- 0     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols)"},{"path":"https://metaRange.github.io/metaRange/articles/species_interactions.html","id":"throphic-interactions","dir":"Articles","previous_headings":"","what":"Throphic interactions","title":"03: Species interactions","text":"can also add process simulates trophic interactions form predation. Assuming species 2 predator species 1 prey, means species 2 reduce abundance species 1, can occur areas species 1. ’ll use similar setup , slightly adjusted values: now process simulates predation. Note predation effectiveness dependent climate suitability predator.  Note species 2 occupies areas species 1 despite completely different climatic niche. Reminder: species_1 species_2","code":"sim <- create_simulation(create_example_landscape()) sim$add_species(name = \"species_1\") sim$add_species(name = \"species_2\")  sim$add_traits(     species = \"species_1\",     population_level = TRUE,     abundance = 10000,     climate_suitability = 1,     reproduction_rate = 0.5,     carrying_capacity = 10000 ) sim$add_traits(     species = \"species_2\",     population_level = TRUE,     abundance = 500,     climate_suitability = 1,     reproduction_rate = 0.3,     carrying_capacity = 1000 ) sim$add_traits(     species = c(\"species_1\", \"species_2\"),     population_level = FALSE,     dispersal_kernel = calculate_dispersal_kernel(         max_dispersal_dist = 3,         kfun = negative_exponential_function,         mean_dispersal_dist = 1     ) ) sim$add_traits(     species = \"species_1\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 290,     min_temperature = 270,     max_precipitation = 1000,     optimal_precipitation = 800,     min_precipitation = 0 ) sim$add_traits(     species = \"species_2\",     population_level = FALSE,     max_temperature = 300,     optimal_temperature = 270,     min_temperature = 260,     max_precipitation = 1000,     optimal_precipitation = 300,     min_precipitation = 0 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"calculate_suitability\",     process_fun = function() {         self$traits$climate_suitability <-             calculate_suitability(                 self$traits$max_temperature,                 self$traits$optimal_temperature,                 self$traits$min_temperature,                 self$sim$environment$current$temperature             ) *             calculate_suitability(                 self$traits$max_precipitation,                 self$traits$optimal_precipitation,                 self$traits$min_precipitation,                 self$sim$environment$current$precipitation             )     },     execution_priority = 1 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"reproduction\",     process_fun = function() {         self$traits$carrying_capacity <-             self$traits$carrying_capacity *             self$traits$climate_suitability          self$traits$reproduction_rate <-             self$traits$reproduction_rate *             self$sim$environment$current$habitat          self$traits$abundance <-             ricker_reproduction_model(                 self$traits$abundance,                 self$traits$reproduction_rate,                 self$traits$carrying_capacity             )     },     execution_priority = 2 ) sim$add_process(     species = c(\"species_1\", \"species_2\"),     process_name = \"dispersal_process\",     process_fun = function() {         self$traits[[\"abundance\"]] <- dispersal(             abundance = self$traits[[\"abundance\"]],             dispersal_kernel = self$traits[[\"dispersal_kernel\"]])     },     execution_priority = 3 ) sim$add_globals(trophic_conversion_factor = 0.5) sim$add_process(     species = \"species_2\",     process_name = \"predation\",     process_fun = function() {         self$traits$abundance <-             self$sim$species_1$traits$abundance *             self$traits$climate_suitability *             self$sim$globals$trophic_conversion_factor          self$sim$species_1$traits$abundance <-             self$sim$species_1$traits$abundance -             self$sim$species_1$traits$abundance *             self$traits$climate_suitability     },     execution_priority = 4 ) sim$begin() plot_cols <- hcl.colors(100, \"Purple-Yellow\", rev = TRUE) plot(sim, \"species_1\", \"abundance\", main = \"Sp: 1 abundance\", col = plot_cols) plot(sim, \"species_2\", \"abundance\", main = \"Sp: 2 abundance\", col = plot_cols) max_temperature = 300 optimal_temperature = 290 min_temperature = 270 max_precipitation = 1000 optimal_precipitation = 800 min_precipitation = 0 max_temperature = 300 optimal_temperature = 270 min_temperature = 260 max_precipitation = 1000 optimal_precipitation = 300 min_precipitation = 0"},{"path":"https://metaRange.github.io/metaRange/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Fallert. Author, maintainer, copyright holder. Lea Li. Author, copyright holder.            Implemented first version metabolic scaling Juliano Sarmento Cabral. Author, copyright holder, thesis advisor. Tyler Morgan-Wall. Contributor, copyright holder. Bavarian Ministry Science Arts (bayklif). Funder. Deutsche Bundesstiftung Umwelt (DBU). Funder.","code":""},{"path":"https://metaRange.github.io/metaRange/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fallert S, Li L, Sarmento Cabral J (2023). metaRange: Framework Build Mechanistic Metabolic Constrained Species Distribution Models. R package version 1.0.1, https://metaRange.github.io/metaRange/.","code":"@Manual{,   title = {metaRange: Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models},   author = {Stefan Fallert and Lea Li and Juliano {Sarmento Cabral}},   year = {2023},   note = {R package version 1.0.1},   url = {https://metaRange.github.io/metaRange/}, }"},{"path":[]},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"general-advice","dir":"","previous_headings":"","what":"General advice","title":"Contributing","text":"nice.","code":""},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug reports","title":"Contributing","text":"Please provide minimal reproducible example applicable depending severity bug (typo vs crash) also sessionInfo().","code":""},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"notes-for-developers-interested-in-contributing","dir":"","previous_headings":"","what":"Notes for developers interested in contributing:","title":"Contributing","text":"Note package includes C++ code. build , need functioning compiler toolchain (RTools windows).","code":""},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Notes for developers interested in contributing:","what":"Code style","title":"Contributing","text":"Functions, parameter variables snake_case, classes CamelCase. Note .lintr file R code .clang-format file c++ code. Also, helpful command: quick workflow make sure nothing breaks making changes:","code":"styler::style_pkg(     scope = \"line_breaks\",     strict = TRUE,     indent_by = 4L ) library(terra) Rcpp::compileAttributes() devtools::document() library(tinytest) devtools::load_all()  # Enable extensive reporting from metaRange functions when testing set_verbosity(2)  # quick tests; suitable for CRAN and the CI tinytest::test_all()  # A longer a bit more extensive test; suitable for local testing tinytest::test_all(testdir = \"inst/local\")  # and lastly the R CMD check devtools::check()"},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature requests","title":"Contributing","text":"Open issue desired functionality discuss.","code":""},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing","text":"Please create issue first. , make sure CRAN check passes, adhere general code style create tests add new functionality.","code":""},{"path":"https://metaRange.github.io/metaRange/CONTRIBUTING.html","id":"scientific-collaboration","dir":"","previous_headings":"","what":"Scientific collaboration","title":"Contributing","text":"Always welcome (ability may depend number current ongoing projects), sure reach via mail issue.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"metarange","dir":"","previous_headings":"","what":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"R package metaRange framework allows build process based species distribution models can include (basically) arbitrary number environmental factors, processes, species species interactions. common denominator models build metaRange grid (.e. raster) population (.e. individual) based.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"Install stable version CRAN : development version github :","code":"install.packages(\"metaRange\") devtools::install_github(\"metaRange/metaRange\")"},{"path":"https://metaRange.github.io/metaRange/index.html","id":"who-is-this-package-for","dir":"","previous_headings":"","what":"Who is this package for?","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"Ecologists programmers interested studying predicting species distributions interactions influence changing environment intermediate time scale (years hundreds years).","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"prerequisites--where-to-get-help","dir":"","previous_headings":"","what":"Prerequisites / where to get help","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"give users different experience levels easy introduction metaRange, accompanied vignettes / articles give -depth explanations examples setup different types simulations. said, basic knowledge general R programming “classic” object-oriented programming (OOP) concepts well familiarity geographic (raster) data processing species distribution models (SDM) might beneficial. case one unfamiliar topics reading recommendations:","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/index.html","id":"environment","dir":"","previous_headings":"","what":"Environment","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"package supports unlimited number type environmental variables example climate data, land-use data, habitat suitability maps kind data may influence species simulation. Environment variables can supplied raster data (specifically SpatRasterDataset (SDS) created terra package) (Hijmans 2023). layer SDS correspond / represent different time steps simulation enables simulations varying environmental conditions.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"species","dir":"","previous_headings":"","what":"Species","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"simulation can contain multiple species, well interactions . Every simulated species (.e. species object) consists set processes describe ’s relationship time, , abiotic environment species traits, can type data can accessed changed processes. Species implied populations, inhabit one grid cell landscape. computational level means traits species cases stored matrix size landscape simulated , value matrix represents trait value population.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"flexibility--dynamic-process-execution","dir":"","previous_headings":"","what":"Flexibility / dynamic process execution","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"processes species executed time step, based user defined priority (.e. user can choose process species executed time within time step). gives enormous flexibility type simulations user wants perform. One can simulate study single species range dynamics, species interactions, age-structured populations, invasion dynamics, climate land-use change combination factors population / meta-population level.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"ecological-functions","dir":"","previous_headings":"","what":"Ecological functions","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"provide user quick start building models metaRange, includes common ecological functions can used model variety species kernel-based dispersal, negative exponential function calculate kernel, environmental suitability estimation based cardinal values, reproduction model form Ricker model, well metabolic scaling multiple parameter based bodymass temperature.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"performance critical parts package implemented C++ help Rcpp (Eddelbuettel & Balamuta 2018) RcppArmadillo (Eddelbuettel & Sanderson 2014) packages. package can handle simulations large spatial (millions grid cells) temporal extent (> hundreds years / time steps) regular consumer grade hardware.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"Thanks mikefc / coolbutuseless tutorial “Modifying R6 objects creation” Tyler Morgan-Wall R package rayimage gave good example Rcpp implementation image convolution function.","code":""},{"path":"https://metaRange.github.io/metaRange/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models","text":"Eddelbuettel D, Balamuta J (2018). “Extending R C++: Brief Introduction Rcpp.” American Statistician, 72(1), 28-36. doi:10.1080/00031305.2017.1375990 Eddelbuettel D, Sanderson C (2014). “RcppArmadillo: Accelerating R high-performance C++ linear algebra.” Computational Statistics Data Analysis, 71, 1054-1063. doi:10.1016/j.csda.2013.02.005 Chang W (2021). R6: Encapsulated Classes Reference Semantics. R package version 2.5.1, https://CRAN.R-project.org/package=R6. Hijmans R (2023). terra: Spatial Data Analysis. R package version 1.7-46, https://CRAN.R-project.org/package=terra. Dormann, C.F., Schymanski, S.J., Cabral, J., Chuine, ., Graham, C., Hartig, F., Kearney, M., Morin, X., Römermann, C., Schröder, B. Singer, . (2012), Correlation process species distribution models: bridging dichotomy. Journal Biogeography, 39: 2119–2131. doi:10.1111/j.1365-2699.2011.02659.x","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://metaRange.github.io/metaRange/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://metaRange.github.io/metaRange/reference/calculate_dispersal_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"Use user defined function create 2D dispersal kernel.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_dispersal_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"","code":"calculate_dispersal_kernel(max_dispersal_dist, kfun, normalize = TRUE, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/calculate_dispersal_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"max_dispersal_dist <numeric> maximum dispersal distance. kfun <function> kernel function use. Can user-defined, case needs vectorized accept (least) parameter \"x\" representing distance source input return vector size max_dispersal_dist. normalize <boolean> whether normalize kernel. ... additional parameters passed kernel function.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_dispersal_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"Dispersal kernel probabilities.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_dispersal_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate 2D dispersal kernel. — calculate_dispersal_kernel","text":"","code":"# a very simple uniform kernel uniform_kernel <- calculate_dispersal_kernel(     max_dispersal_dist = 3,     kfun = function(x) {         x * 0 + 1     } ) # same as stopifnot(     uniform_kernel == matrix(1 / 49, nrow = 7, ncol = 7) )  # now a negative exponential kernel # not that `mean_dispersal_dist` # is passed to the kernel function. calculate_dispersal_kernel(     max_dispersal_dist = 3,     kfun = negative_exponential_function,     mean_dispersal_dist = 1 ) #>              [,1]         [,2]         [,3]        [,4]         [,5] #> [1,] 0.0001038990 0.0003715183 0.0009015769 0.001247255 0.0009015769 #> [2,] 0.0003715183 0.0017578494 0.0057477554 0.009216039 0.0057477554 #> [3,] 0.0009015769 0.0057477554 0.0297407523 0.068097831 0.0297407523 #> [4,] 0.0012472553 0.0092160392 0.0680978308 0.503178692 0.0680978308 #> [5,] 0.0009015769 0.0057477554 0.0297407523 0.068097831 0.0297407523 #> [6,] 0.0003715183 0.0017578494 0.0057477554 0.009216039 0.0057477554 #> [7,] 0.0001038990 0.0003715183 0.0009015769 0.001247255 0.0009015769 #>              [,6]         [,7] #> [1,] 0.0003715183 0.0001038990 #> [2,] 0.0017578494 0.0003715183 #> [3,] 0.0057477554 0.0009015769 #> [4,] 0.0092160392 0.0012472553 #> [5,] 0.0057477554 0.0009015769 #> [6,] 0.0017578494 0.0003715183 #> [7,] 0.0003715183 0.0001038990"},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization constant calculation — calculate_normalization_constant","title":"Normalization constant calculation — calculate_normalization_constant","text":"Calculates normalization constant metabolic scaling based known estimated parameter value reference temperature.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization constant calculation — calculate_normalization_constant","text":"","code":"calculate_normalization_constant(   parameter_value,   scaling_exponent,   mass,   reference_temperature,   E = NULL,   k = 8.617333e-05,   warn_if_possibly_false_input = getOption(\"metaRange.verbose\", default = FALSE) > 0 )"},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization constant calculation — calculate_normalization_constant","text":"parameter_value <numeric> parameter value reference temperature. scaling_exponent <numeric> allometric scaling exponent mass. mass <numeric>  mean (individual) mass. reference_temperature <numeric> reference temperature kelvin (K). E <numeric> Activation energy electronvolts (eV). k <numeric> Boltzmann's constant (eV / K). warn_if_possibly_false_input <boolean> Print warning input different known literature value combinations.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization constant calculation — calculate_normalization_constant","text":"calculated normalization constant.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalization constant calculation — calculate_normalization_constant","text":"Note different scaling values different parameter. following summary table 4 Brown, Sibly Kodric-Brown (2012) (see references).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalization constant calculation — calculate_normalization_constant","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004) Toward Metabolic Theory Ecology. Ecology, 85 1771--1789. doi:10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012) Introduction: Metabolism Basis Theoretical Unification Ecology. Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown) doi:10.1002/9781119968535.ch","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/calculate_normalization_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalization constant calculation — calculate_normalization_constant","text":"","code":"calculate_normalization_constant(     parameter_value = 1,     scaling_exponent = -1 / 4,     mass = 1,     reference_temperature = 273.15,     E = -0.65 ) #> [1] 983745454953"},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate (estimate) environmental suitability — calculate_suitability","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"Calculate / estimate environmental suitability given environmental value, based beta distribution, using three \"cardinal\" values species environmental niche.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"","code":"calculate_suitability(vmax, vopt, vmin, venv)"},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"vmax <numeric> upper (.e. maximum) tolerable value vopt <numeric> optimal (.e. preferred) value vmin <numeric> lower (.e. minimum) tolerable value venv <numeric> environmental value calculate suitability","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"<numeric> environmental suitability","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"environmental suitability calculated based beta distribution formula provided Yin et al. (1995) simplified Yan Hunt (1999) (see references paragraph) $$suitability = (\\frac{V_{max} - V_{env}}{V_{max} - V_{opt}}) * (\\frac{V_{env} - V_{min}}{V_{opt} - V_{min}})^{\\frac{V_{opt} - V_{min}}{V_{max} - V_{opt}}}$$","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"original formula Yin et al. intended calculate relative daily growth rate plants relation temperature. abstraction use ) calculate niche suitability; B) use environmental values temperature might valid. However, assumption environmental suitability one niche dimension highest one optimal value decreases towards tolerable minimum maximum values nonlinear fashion seems reasonable.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"Yin, X., Kropff, M.J., McLaren, G., Visperas, R.M., (1995) nonlinear model crop development function temperature, Agricultural Forest Meteorology, Volume 77, Issues 1–2, Pages 1--16, doi:10.1016/0168-1923(95)02236-Q Also, see equation 4 : Weikai Yan, L.. Hunt, (1999) Equation Modelling Temperature Response Plants using Cardinal Temperatures, Annals Botany, Volume 84, Issue 5, Pages 607--614, ISSN 0305-7364, doi:10.1006/anbo.1999.0955","code":""},{"path":"https://metaRange.github.io/metaRange/reference/calculate_suitability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate (estimate) environmental suitability — calculate_suitability","text":"","code":"calculate_suitability(     vmax = 30,     vopt = 25,     vmin = 10,     venv = 1:40 ) #>  [1] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [7] 0.000000000 0.000000000 0.000000000 0.000000000 0.001125926 0.008533333 #> [13] 0.027200000 0.060681481 0.111111111 0.179200000 0.264237037 0.364088889 #> [19] 0.475200000 0.592592593 0.709866667 0.819200000 0.911348148 0.975644444 #> [25] 1.000000000 0.970903704 0.873422222 0.691200000 0.406459259 0.000000000 #> [31] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #> [37] 0.000000000 0.000000000 0.000000000 0.000000000 calculate_suitability(     vmax = seq(30, 32, length.out = 40),     vopt = seq(20, 23, length.out = 40),     vmin = seq(9, 11, length.out = 40),     venv = 1:40 ) #>  [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0637462 0.1932336 0.3222710 0.4449278 0.5585313 #> [15] 0.6614255 0.7523980 0.8304607 0.8947469 0.9444555 0.9788188 0.9970819 #> [22] 0.9984890 0.9822737 0.9476518 0.8938155 0.8199290 0.7251248 0.6084998 #> [29] 0.4691125 0.3059800 0.1180754 0.0000000 0.0000000 0.0000000 0.0000000 #> [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000  try(calculate_suitability(     vmax = 1,     vopt = seq(20, 23, length.out = 40),     vmin = seq(9, 11, length.out = 40),     venv = 1:40 )) #> Error : The sizes of venv, vmax, vopt and vmin are not equal."},{"path":"https://metaRange.github.io/metaRange/reference/create_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simulation — create_simulation","title":"Create a simulation — create_simulation","text":"Creates metaRangeSimulation object. convenience wrapper metaRangeSimulation$new().","code":""},{"path":"https://metaRange.github.io/metaRange/reference/create_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simulation — create_simulation","text":"","code":"create_simulation(source_environment, ID = NULL, seed = NULL)"},{"path":"https://metaRange.github.io/metaRange/reference/create_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simulation — create_simulation","text":"source_environment <SpatRasterDataset> created terra::sds() represents environment. individual data sets represent different environmental variables (e.g. temperature habitat availability) different layer data sets represent different timesteps simulation. function metaRangeSimulation$set_time_layer_mapping() can used extend/ shorten simulation timesteps set mapping time step corresponding environmental layer. can used e.g. repeat first () layer burn-period. number layers must data sets. ID <string> optional simulation identification string. set automatically none specified. seed <integer> optional seed random number generator. set automatically none specified.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/create_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simulation — create_simulation","text":"metaRangeSimulation object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/create_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simulation — create_simulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- create_simulation(sim_env)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispersal process — dispersal","title":"Dispersal process — dispersal","text":"Disperse (abundance) matrix using dispersal kernel optional weights.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispersal process — dispersal","text":"","code":"dispersal(dispersal_kernel, abundance, weights)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispersal process — dispersal","text":"dispersal_kernel <numeric matrix> dispersal kernel. abundance <numeric matrix> abundance matrix. weights <numeric matrix>  optional weights form matrix dimensions abundance range: 0, 1.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispersal process — dispersal","text":"<numeric matrix> Dispersed abundance matrix.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dispersal process — dispersal","text":"abundance matrix dispersed using dispersal kernel. matrix weights supplied, individuals redistribute within dispersal kernel according weights. .e. individuals likely move towards areas higher weight, within dispersal distance.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dispersal process — dispersal","text":"","code":"n <- 10 n2 <- n^2 abu <- matrix(1:n2, nrow = n, ncol = n) suitab <- matrix(1, nrow = n, ncol = n) kernel <- calculate_dispersal_kernel(     max_dispersal_dist = 4,     kfun = negative_exponential_function,     mean_dispersal_dist = 1.2 ) res1 <- dispersal(     dispersal_kernel = kernel,     abundance = abu ) res2 <- dispersal(     dispersal_kernel = kernel,     abundance = abu,     weights = suitab ) stopifnot(sum(res1) - sum(res2) < 0.01)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Directed and fixed sized dispersal — dispersal_fixed_directed","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"Dispersal function uses fixed sized kernel directed dispersal towards areas higher weight. Use case e.g. animals can sense surroundings.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"","code":"dispersal_fixed_directed(abundance, weights, dispersal_kernel)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"abundance <numeric matrix> Values need non-negative. weights <numeric matrix> Values need non-missing 0 1 result make sense. Needs size abundance. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directed and fixed sized dispersal — dispersal_fixed_directed","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_undirected.html","id":null,"dir":"Reference","previous_headings":"","what":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"Dispersal function uses fixed sized kernel influenced external factors. individuals cell redistributed surrounding cells according probability defined dispersal kernel. Useful e.g. wind dispersed plants.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_undirected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"","code":"dispersal_fixed_undirected(abundance, dispersal_kernel)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_undirected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"abundance <numeric matrix> Values need non-negative. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_undirected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undirected and fixed sized dispersal — dispersal_fixed_undirected","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_unweighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Unweighted and fixed sized dispersal — dispersal_fixed_unweighted","title":"Unweighted and fixed sized dispersal — dispersal_fixed_unweighted","text":"Dispersal function uses fixed sized kernel influenced external factors. individuals cell redistributed surrounding cells according probability defined dispersal kernel. Useful e.g. wind dispersed plants.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_unweighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unweighted and fixed sized dispersal — dispersal_fixed_unweighted","text":"","code":"dispersal_fixed_unweighted(abundance, dispersal_kernel)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_unweighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unweighted and fixed sized dispersal — dispersal_fixed_unweighted","text":"abundance <numeric matrix> Values need non-negative. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_unweighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unweighted and fixed sized dispersal — dispersal_fixed_unweighted","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted and fixed sized dispersal — dispersal_fixed_weighted","title":"Weighted and fixed sized dispersal — dispersal_fixed_weighted","text":"Dispersal function uses fixed sized kernel weighted dispersal towards areas higher weight. Use case e.g. animals can sense surroundings.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted and fixed sized dispersal — dispersal_fixed_weighted","text":"","code":"dispersal_fixed_weighted(abundance, weights, dispersal_kernel)"},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted and fixed sized dispersal — dispersal_fixed_weighted","text":"abundance <numeric matrix> Values need non-negative. weights <numeric matrix> Values need non-missing 0 1 result make sense. Needs size abundance. dispersal_kernel <numeric matrix> Dispersal kernel. Needs odd size.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/dispersal_fixed_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted and fixed sized dispersal — dispersal_fixed_weighted","text":"<numeric matrix> new abundance matrix.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolic scaling — metabolic_scaling","title":"Metabolic scaling — metabolic_scaling","text":"function calculate metabolic scaling parameter, based metabolic theory ecology (Brown et al. 2004).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metabolic scaling — metabolic_scaling","text":"","code":"metabolic_scaling(   normalization_constant,   scaling_exponent,   mass,   temperature,   E,   k = 8.617333e-05 )"},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metabolic scaling — metabolic_scaling","text":"normalization_constant <numeric> normalization constant. scaling_exponent <numeric> allometric scaling exponent mass. mass <numeric matrix>  mean (individual) mass. temperature <numeric matrix> temperature kelvin (K). E <numeric> activation energy electronvolts (eV). k <numeric> Boltzmann's constant (eV / K).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metabolic scaling — metabolic_scaling","text":"<numeric> scaled parameter.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"equation-","dir":"Reference","previous_headings":"","what":"Equation:","title":"Metabolic scaling — metabolic_scaling","text":"function uses equation form : $$parameter = normalization\\_constant \\cdot mass^{scaling\\_exponent} \\cdot e^{\\frac{Activation\\_energy}{k \\cdot temperature}}$$","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"parameter-","dir":"Reference","previous_headings":"","what":"Parameter:","title":"Metabolic scaling — metabolic_scaling","text":"Note different scaling values different parameter. following summary table 4 Brown, Sibly Kodric-Brown (2012) (see references).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"units-","dir":"Reference","previous_headings":"","what":"Units:","title":"Metabolic scaling — metabolic_scaling","text":"$$1 \\ electronvolt = 1.602176634 \\cdot 10^{-19} Joule$$ $$Boltzmann \\ constant = 1.380649 \\cdot 10^{-23} \\frac{Joule}{Kelvin}$$ $$Boltzmann \\ constant \\ \\frac{eV}{K} = 8.617333e-05 = \\frac{1.380649 \\cdot 10^{-23}}{1.602176634 \\cdot 10^{-19}}$$","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metabolic scaling — metabolic_scaling","text":"Brown, J.H., Gillooly, J.F., Allen, .P., Savage, V.M. West, G.B. (2004) Toward Metabolic Theory Ecology. Ecology, 85 1771--1789. doi:10.1890/03-9000 Brown, J.H., Sibly, R.M. Kodric-Brown, . (2012) Introduction: Metabolism Basis Theoretical Unification Ecology. Metabolic Ecology (eds R.M. Sibly, J.H. Brown . Kodric-Brown) doi:10.1002/9781119968535.ch","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metabolic_scaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metabolic scaling — metabolic_scaling","text":"","code":"reproduction_rate <- 0.25 E_reproduction_rate <- -0.65 estimated_normalization_constant <-     calculate_normalization_constant(         parameter_value = reproduction_rate,         scaling_exponent = -1/4,         mass = 100,         reference_temperature = 273.15 + 10,         E = E_reproduction_rate     ) metabolic_scaling(     normalization_constant = estimated_normalization_constant,     scaling_exponent = -1/4,     mass = 100,     temperature = 273.15 + 20,     E = E_reproduction_rate ) #> [1] 0.6202913  carrying_capacity <- 100 E_carrying_capacity <- 0.65 estimated_normalization_constant <-     calculate_normalization_constant(         parameter_value = carrying_capacity,         scaling_exponent = -3/4,         mass = 100,         reference_temperature = 273.15 + 10,         E = E_carrying_capacity     ) metabolic_scaling(     normalization_constant = estimated_normalization_constant,     scaling_exponent = -3/4,     mass = 100,     temperature = 273.15 + 20,     E = E_carrying_capacity ) #> [1] 40.30365"},{"path":"https://metaRange.github.io/metaRange/reference/metaRange-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRange: Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models — metaRange-package","title":"metaRange: Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models — metaRange-package","text":"Build spatially temporally explicit process-based species distribution models, can include arbitrary number environmental factors, species processes including metabolic constraints species interactions. focus package simulating populations one multiple species grid-based landscape studying meta-population dynamics emergent patterns arise interaction species complex environmental conditions. provides functions common ecological processes negative exponential, kernel-based dispersal (see Nathan et al. (2012) doi:10.1093/acprof:oso/9780199608898.003.0015 ), calculation environmental suitability based cardinal values ( Yin et al. (1995) doi:10.1016/0168-1923(95)02236-Q , simplified Yan Hunt (1999) doi:10.1006/anbo.1999.0955  see eq: 4), reproduction form Ricker model (see Ricker (1954) doi:10.1139/f54-039  Cabral Schurr (2010) doi:10.1111/j.1466-8238.2009.00492.x ), well metabolic scaling based metabolic theory ecology (see Brown et al. (2004) doi:10.1890/03-9000  Brown, Sibly Kodric-Brown (2012) doi:10.1002/9781119968535.ch ).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRange-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"metaRange: Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models — metaRange-package","text":"tba.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRange-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metaRange: Framework to Build Mechanistic and Metabolic Constrained Species Distribution Models — metaRange-package","text":"Maintainer: Stefan Fallert srfallert@gmail.com (ORCID) [copyright holder] Authors: Lea Li (Implemented first version metabolic scaling) [copyright holder] Juliano Sarmento Cabral j.sarmentocabral@bham.ac.uk (ORCID) [copyright holder, thesis advisor] contributors: Tyler Morgan-Wall (ORCID) [contributor, copyright holder] Bavarian Ministry Science Arts (bayklif) [funder] Deutsche Bundesstiftung Umwelt (DBU) [funder]","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeEnvironment object — metaRangeEnvironment","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Creates metaRangeEnvironment object form R6 class stores handles environmental values influence species simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<metaRangeEnvironment> object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"sourceSDS SpatRasterDataset created terra::sds() holds environmental values influencing simulation. Note individual data sets sensibly named names used throughout simulation refer . current R environment holds environmental values influencing present time step simulation regular 2D R matrices.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"metaRangeEnvironment$new() metaRangeEnvironment$set_current() metaRangeEnvironment$print()","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Creates new metaRangeEnvironment object. done automatically simulation created. need call user.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$new(sourceSDS = NULL)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"sourceSDS <SpatRasterDataset> created terra::sds() holds environmental values influencing simulation. Note individual data sets sensibly named names used throughout simulation refer .","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<metaRangeEnvironment> object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"# Note: Only for illustration purposes. env <- metaRangeEnvironment$new(sourceSDS = terra::sds(terra::rast(nrow = 2, ncol = 2))) env"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"method-set-current-","dir":"Reference","previous_headings":"","what":"Method set_current()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Set current (active) time step / environment. reason call user. current time step set automatically.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$set_current(layer)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"layer <integer> layer","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"# Only for illustration purposes. sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) names(sim_env) <- \"env_01\" env <- metaRangeEnvironment$new(sourceSDS = sim_env) env$set_current(layer = 1)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"Prints information environment console","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"metaRangeEnvironment$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"env <- metaRangeEnvironment$new(     sourceSDS = terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) ) env$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeEnvironment object — metaRangeEnvironment","text":"","code":"## ------------------------------------------------ ## Method `metaRangeEnvironment$new` ## ------------------------------------------------  # Note: Only for illustration purposes. env <- metaRangeEnvironment$new(sourceSDS = terra::sds(terra::rast(nrow = 2, ncol = 2))) env #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84)  #> source(s)   : memory   ## ------------------------------------------------ ## Method `metaRangeEnvironment$set_current` ## ------------------------------------------------  # Only for illustration purposes. sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) names(sim_env) <- \"env_01\" env <- metaRangeEnvironment$new(sourceSDS = sim_env) env$set_current(layer = 1)  ## ------------------------------------------------ ## Method `metaRangeEnvironment$print` ## ------------------------------------------------  env <- metaRangeEnvironment$new(     sourceSDS = terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 2)) ) env$print() #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 2  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84)  #> source(s)   : memory"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":null,"dir":"Reference","previous_headings":"","what":"Process priority queue — metaRangePriorityQueue","title":"Process priority queue — metaRangePriorityQueue","text":"Creates priority queue form R6 class, manages correct process execution order.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process priority queue — metaRangePriorityQueue","text":"<metaRangePriorityQueue> metaRangePriorityQueue object.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Process priority queue — metaRangePriorityQueue","text":"metaRangePriorityQueue$new() metaRangePriorityQueue$execute_next_process() metaRangePriorityQueue$enqueue() metaRangePriorityQueue$dequeue() metaRangePriorityQueue$sort_future_queue() metaRangePriorityQueue$update() metaRangePriorityQueue$is_empty() metaRangePriorityQueue$get_queue() metaRangePriorityQueue$get_future_queue() metaRangePriorityQueue$get_current_index() metaRangePriorityQueue$print()","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Process priority queue — metaRangePriorityQueue","text":"Creates new metaRangePriorityQueue object. Note: reason call user. priority queue created automatically simulation created.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$new()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<metaRangePriorityQueue> metaRangePriorityQueue object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"# Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr_queue"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-execute-next-process-","dir":"Reference","previous_headings":"","what":"Method execute_next_process()","title":"Process priority queue — metaRangePriorityQueue","text":"Executes next process queue. reason call user. next process executed automatically.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$execute_next_process(verbose)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"verbose <logical> Print timing information .","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<logical> TRUE next process executed, FALSE queue empty.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"# Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$execute_next_process(verbose = TRUE)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-enqueue-","dir":"Reference","previous_headings":"","what":"Method enqueue()","title":"Process priority queue — metaRangePriorityQueue","text":"Add process (future) queue. Users use method added process simulation via add_process method simulation object argument queue = FALSE. Otherwise process added queue automatically.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$enqueue(process)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"process <metaRangeProcess> metaRangeProcess added queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-dequeue-","dir":"Reference","previous_headings":"","what":"Method dequeue()","title":"Process priority queue — metaRangePriorityQueue","text":"Remove process (future) queue. Useful remove process queue longer needed. E.g. species went extinct.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$dequeue(PID = NULL)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process priority queue — metaRangePriorityQueue","text":"PID <string> ID process, dequeued.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$dequeue(pr$get_PID()) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-sort-future-queue-","dir":"Reference","previous_headings":"","what":"Method sort_future_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Sort (future) queue based execution priority. method called automatically process added queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$sort_future_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$sort_future_queue() # at least no error"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Process priority queue — metaRangePriorityQueue","text":"Update reset queue. method called automatically end time step.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$update()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-is-empty-","dir":"Reference","previous_headings":"","what":"Method is_empty()","title":"Process priority queue — metaRangePriorityQueue","text":"Check queue empty.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$is_empty()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<boolean> TRUE queue empty FALSE otherwise.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() stopifnot(pr_queue$is_empty())"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-get-queue-","dir":"Reference","previous_headings":"","what":"Method get_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Get current queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<named int vector> current queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-get-future-queue-","dir":"Reference","previous_headings":"","what":"Method get_future_queue()","title":"Process priority queue — metaRangePriorityQueue","text":"Get future queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_future_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<named int vector> future queue.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-get-current-index-","dir":"Reference","previous_headings":"","what":"Method get_current_index()","title":"Process priority queue — metaRangePriorityQueue","text":"Get number / index next executed process.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$get_current_index()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<integer> index.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_current_index()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Process priority queue — metaRangePriorityQueue","text":"Prints information queue console.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"metaRangePriorityQueue$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Process priority queue — metaRangePriorityQueue","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"pr_queue <- metaRangePriorityQueue$new() pr_queue$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangePriorityQueue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process priority queue — metaRangePriorityQueue","text":"","code":"## ------------------------------------------------ ## Method `metaRangePriorityQueue$new` ## ------------------------------------------------  # Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr_queue #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$execute_next_process` ## ------------------------------------------------  # Only for illustration purposes. pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$execute_next_process(verbose = TRUE) #> |-  : A #> test #> |---- 0.00032 secs #> [1] TRUE  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$enqueue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue() #> PID-17511e0c91-A  #>                1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$dequeue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$dequeue(pr$get_PID()) pr_queue$get_future_queue() #> named integer(0)  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$sort_future_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$sort_future_queue() # at least no error  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$update` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue() #> PID-16012e99b1-A  #>                1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$is_empty` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() stopifnot(pr_queue$is_empty())  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_queue() #> PID-13e28b76d1-A  #>                1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_future_queue` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$get_future_queue() #> PID-14e0252501-A  #>                1   ## ------------------------------------------------ ## Method `metaRangePriorityQueue$get_current_index` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr <- metaRangeProcess$new(\"A\", \"1\", \\() {message(\"test\")}, 1, new.env()) pr_queue$enqueue(pr) pr_queue$update() pr_queue$get_current_index() #> [1] 1  ## ------------------------------------------------ ## Method `metaRangePriorityQueue$print` ## ------------------------------------------------  pr_queue <- metaRangePriorityQueue$new() pr_queue$print() #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeProcess object — metaRangeProcess","title":"metaRangeProcess object — metaRangeProcess","text":"Creates metaRangeProcess object form R6 class stores handles individual parts define process.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeProcess object — metaRangeProcess","text":"<metaRangeProcess> metaRangeProcess object.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeProcess object — metaRangeProcess","text":"fun <function> processes function.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeProcess object — metaRangeProcess","text":"metaRangeProcess$new() metaRangeProcess$get_PID() metaRangeProcess$get_name() metaRangeProcess$get_priority() metaRangeProcess$get_env_label() metaRangeProcess$print()","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeProcess object — metaRangeProcess","text":"Creates new metaRangeProcess object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$new(   process_name,   id = \"\",   process_fun,   execution_priority,   env,   env_label = NULL )"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeProcess object — metaRangeProcess","text":"process_name <string> name process. id <string> optional ID process. process_fun <function> function called process executed. function executed specified environment (see argument: env) access variables environment. function may arguments, .e. .null(formals(process_fun)) must TRUE. execution_priority <integer> priority process. lower number earlier process executed. Note priority used sort processes priority queue. actual execution order determined order processes queue. env <environment> environment process executed. env_label <string> optional name execution environment. Just used human readable label debug purposes.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<metaRangeProcess> metaRangeProcess object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"# Note: Only for illustration purposes. Use the add_process method of the # simulation object to add processes to a simulation. pr <- metaRangeProcess$new(    process_name = \"ecological_process\",    process_fun = function() {       cat(\"Execute ecological process!\")    },    execution_priority = 1L,    env = new.env(),    env_label = \"a_species_name\" ) pr"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-get-pid-","dir":"Reference","previous_headings":"","what":"Method get_PID()","title":"metaRangeProcess object — metaRangeProcess","text":"get process ID","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_PID()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> process ID","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_PID()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"metaRangeProcess object — metaRangeProcess","text":"get process name","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_name()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> process name","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_name()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-get-priority-","dir":"Reference","previous_headings":"","what":"Method get_priority()","title":"metaRangeProcess object — metaRangeProcess","text":"get process execution priority","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_priority()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<integer> process execution priority","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_priority()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-get-env-label-","dir":"Reference","previous_headings":"","what":"Method get_env_label()","title":"metaRangeProcess object — metaRangeProcess","text":"get name process execution environment","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$get_env_label()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<string> name process execution environment NULL","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env(), \"human_readable_label\") pr$get_env_label()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeProcess object — metaRangeProcess","text":"Prints information process console","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"metaRangeProcess$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeProcess object — metaRangeProcess","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeProcess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeProcess object — metaRangeProcess","text":"","code":"## ------------------------------------------------ ## Method `metaRangeProcess$new` ## ------------------------------------------------  # Note: Only for illustration purposes. Use the add_process method of the # simulation object to add processes to a simulation. pr <- metaRangeProcess$new(    process_name = \"ecological_process\",    process_fun = function() {       cat(\"Execute ecological process!\")    },    execution_priority = 1L,    env = new.env(),    env_label = \"a_species_name\" ) pr #> Process name:  ecological_process  #> PID:  PID-119bef7fb-ecological_process  #> execution_priority:  1  #> execution_environment_label:  a_species_name  #> $fun: function() { #>       cat(\"Execute ecological process!\") #>    } #> <environment: 0x00000244942f6658>  ## ------------------------------------------------ ## Method `metaRangeProcess$get_PID` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_PID() #> [1] \"PID-17e9c58cb1-A\"  ## ------------------------------------------------ ## Method `metaRangeProcess$get_name` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_name() #> [1] \"A\"  ## ------------------------------------------------ ## Method `metaRangeProcess$get_priority` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$get_priority() #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeProcess$get_env_label` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env(), \"human_readable_label\") pr$get_env_label() #> [1] \"human_readable_label\"  ## ------------------------------------------------ ## Method `metaRangeProcess$print` ## ------------------------------------------------  pr <- metaRangeProcess$new(\"A\", \"1\", \\() {}, 1, new.env()) pr$print() #> Process name:  A  #> PID:  PID-14cdbe03a1-A  #> execution_priority:  1  #> execution_environment_label:   #> $fun: \\() {} #> <environment: 0x00000244947901d0>"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeSimulation object — metaRangeSimulation","title":"metaRangeSimulation object — metaRangeSimulation","text":"Creates simulation object form R6 class stores handles individual parts necessary run simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeSimulation object — metaRangeSimulation","text":"<metaRangeSimulation> object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeSimulation object — metaRangeSimulation","text":"ID <string> simulation identification. globals <environment> place store global variables. environment <metaRangeEnvironment> metaRangeEnvironment holds environmental values influencing simulation. number_time_steps <integer> number time steps simulation. time_step_layer <integer> vector layer IDs describe environmental layer use time step. current_time_step <integer> current time step. queue <metaRangePriorityQueue> manages order processes executed. processes <list> global (simulation level) <metaRangeProcess> (es). seed <integer> seed random number generator.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeSimulation object — metaRangeSimulation","text":"metaRangeSimulation$new() metaRangeSimulation$add_globals() metaRangeSimulation$set_time_layer_mapping() metaRangeSimulation$get_current_time_step() metaRangeSimulation$add_species() metaRangeSimulation$species_names() metaRangeSimulation$add_process() metaRangeSimulation$add_traits() metaRangeSimulation$exit() metaRangeSimulation$begin() metaRangeSimulation$print() metaRangeSimulation$summary()","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Creates new metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$new(source_environment, ID = NULL, seed = NULL)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"source_environment <SpatRasterDataset> created terra::sds() represents environment. individual data sets represent different environmental variables (e.g. temperature habitat availability) different layer data sets represent different timesteps simulation. function metaRangeSimulation$set_time_layer_mapping() can used extend/ shorten simulation timesteps set mapping time step corresponding environmental layer. can used e.g. repeat first () layer burn-period. number layers must data sets. ID <string> optional simulation identification string. set automatically none specified. seed <integer> optional seed random number generator. set automatically none specified.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<metaRangeSimulation> object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-add-globals-","dir":"Reference","previous_headings":"","what":"Method add_globals()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Add global variables simulation","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_globals(...)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"... <> variables add. Variables add simulation. saved accessible 'globals' field.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_globals(a = 1, b = 2) sim$globals$a #> [1] 1"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-set-time-layer-mapping-","dir":"Reference","previous_headings":"","what":"Method set_time_layer_mapping()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Set time layer simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$set_time_layer_mapping(x)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"x <integer> vector layer indices describe environmental layer use time step.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2, nlyr = 4)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$set_time_layer_mapping(1:2) stopifnot(identical(sim$time_step_layer, 1:2))"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-get-current-time-step-","dir":"Reference","previous_headings":"","what":"Method get_current_time_step()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Get current time step","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$get_current_time_step()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<integer> current time step","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$get_current_time_step() #> [1] 1"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-add-species-","dir":"Reference","previous_headings":"","what":"Method add_species()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds new species simulation","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_species(name)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"name <string> name ID species.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible boolean> TRUE success FALSE failure.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$species_1"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-species-names-","dir":"Reference","previous_headings":"","what":"Method species_names()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Returns names species simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$species_names()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<character> vector species names","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$species_names() #> [1] \"species_1\" \"species_2\""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-add-process-","dir":"Reference","previous_headings":"","what":"Method add_process()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds process simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_process(   species = NULL,   process_name,   process_fun,   execution_priority,   queue = TRUE )"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"species <string> Name species process added . NULL process added simulation object . process_name <string> Name process add. process_fun <named function> function call process gets executed. execution_priority <positive integer> process run within time step. 1 == highest priority .e. function executed first. queue <boolean> TRUE process added process execution queue directly. FALSE process added simulation queue, means order execute process, added manually via metaRangePriorityQueue$enqueue() method.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {message(\"process_1\")}, 1) sim$species_1$processes$species_process_1 sim$add_process(species = NULL, \"global_process_2\", function() {message(\"process_2\")}, 2) sim$processes$global_process_2"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-add-traits-","dir":"Reference","previous_headings":"","what":"Method add_traits()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Adds traits species.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$add_traits(species, population_level = TRUE, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSimulation object — metaRangeSimulation","text":"species <string> Name species traits added . population_level <boolean> TRUE traits added population level (.e. matrix dimensions (nrow/ncol) environment one value population). means traits either need single values extended matrix via base::matrix() already need matrix dimension. FALSE traits added without conversion may type dimension. ... <atomic> (see base::.atomic()) named traits added. Named means: Name = value e.g. = 1.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_traits(\"species_1\", population_level = TRUE, a = 1) sim$add_traits(\"species_1\", population_level = FALSE, b = 2, c = \"c\") sim$species_1$traits$a #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 sim$species_1$traits$b #> [1] 2 sim$species_1$traits$c #> [1] \"c\""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-exit-","dir":"Reference","previous_headings":"","what":"Method exit()","title":"metaRangeSimulation object — metaRangeSimulation","text":"called, end simulation (prematurely) current process finished. Useful e.g. end simulation safely (.e. without error) species alive anymore benefit continue execution last time step.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$exit()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"invisible NULL","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {self$sim$exit()}, 1) sim$begin()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-begin-","dir":"Reference","previous_headings":"","what":"Method begin()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Begins simulation","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$begin()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self> finished simulation","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_process(      species = NULL,      \"timestep_counter\",      function() {          message(\"timestep: \", self$get_current_time_step())      },      1 ) sim$begin()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Prints information simulation console","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"metaRangeSimulation object — metaRangeSimulation","text":"Summarizes information simulation outputs console","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"metaRangeSimulation$summary()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSimulation object — metaRangeSimulation","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$summary()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSimulation object — metaRangeSimulation","text":"","code":"## ------------------------------------------------ ## Method `metaRangeSimulation$new` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary()  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_globals` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_globals(a = 1, b = 2) sim$globals$a #> [1] 1 #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeSimulation$set_time_layer_mapping` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2, nlyr = 4)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$set_time_layer_mapping(1:2) stopifnot(identical(sim$time_step_layer, 1:2))  ## ------------------------------------------------ ## Method `metaRangeSimulation$get_current_time_step` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$get_current_time_step() #> [1] 1 #> [1] 1  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_species` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$species_1 #> Species:  species_1  #> processes:  #> NULL #> traits:  #> character(0)  ## ------------------------------------------------ ## Method `metaRangeSimulation$species_names` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_species(\"species_2\") sim$species_names() #> [1] \"species_2\" \"species_1\" #> [1] \"species_1\" \"species_2\"  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_process` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {message(\"process_1\")}, 1) sim$species_1$processes$species_process_1 #> Process name:  species_process_1  #> PID:  PID-146a633531-species_process_1  #> execution_priority:  1  #> execution_environment_label:  species_1  #> $fun: function() {message(\"process_1\")} #> <environment: 0x000002440d834ab8> sim$add_process(species = NULL, \"global_process_2\", function() {message(\"process_2\")}, 2) sim$processes$global_process_2 #> Process name:  global_process_2  #> PID:  PID-24c5cfc2e2-global_process_2  #> execution_priority:  2  #> execution_environment_label:  simulation_67cdd848  #> $fun: function() {message(\"process_2\")} #> <environment: 0x000002440e8ec1f8>  ## ------------------------------------------------ ## Method `metaRangeSimulation$add_traits` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_traits(\"species_1\", population_level = TRUE, a = 1) sim$add_traits(\"species_1\", population_level = FALSE, b = 2, c = \"c\") sim$species_1$traits$a #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 sim$species_1$traits$b #> [1] 2 #> [1] 2 sim$species_1$traits$c #> [1] \"c\" #> [1] \"c\"  ## ------------------------------------------------ ## Method `metaRangeSimulation$exit` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_species(\"species_1\") sim$add_process(\"species_1\", \"species_process_1\", function() {self$sim$exit()}, 1) sim$begin()  ## ------------------------------------------------ ## Method `metaRangeSimulation$begin` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_var_name\" sim <- metaRangeSimulation$new(source_environment = sim_env) sim$add_process(      species = NULL,      \"timestep_counter\",      function() {          message(\"timestep: \", self$get_current_time_step())      },      1 ) sim$begin() #> timestep: 1 #> timestep: 2 #> timestep: 3 #> timestep: 4  ## ------------------------------------------------ ## Method `metaRangeSimulation$print` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$print() #> metaRangeSimulation object #> Fields:  #>   $ID #>   $globals #>   $environment #>   $number_time_steps #>   $time_step_layer #>   $current_time_step #>   $queue #>   $processes #>   $seed #> Species: none #> Methods:  #>   $species_names() #>   $add_globals() #>   $add_species() #>   $add_traits() #>   $add_process() #>   $begin() #>   $exit() #>   $set_current_time_step() #>   $set_time_layer_mapping() #>   $print() #>   $summary()  ## ------------------------------------------------ ## Method `metaRangeSimulation$summary` ## ------------------------------------------------  sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) sim <- metaRangeSimulation$new(source_environment = sim_env) sim$summary() #> ID: simulation_19d90026  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84)  #> source(s)   : memory  #> Time step layer mapping:  1  #> Current time step:  1  #> Seed:  5  #> Species: #>    #> Simulation level processes: #> NULL #> Gobal variables: #> NULL #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"metaRangeSpecies object — metaRangeSpecies","title":"metaRangeSpecies object — metaRangeSpecies","text":"Creates species object form R6 class stores handles individual parts define species.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaRangeSpecies object — metaRangeSpecies","text":"<metaRangeSpecies> object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"metaRangeSpecies object — metaRangeSpecies","text":"name <string> name ID species. processes <list> <metaRangeProcesses>. processes describe species interacts environment, species. traits <environment> holds traits species. sim <metaRangeSimulation> reference metaRangeSimulation simulation object species part . Useful access environmental data data species.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"metaRangeSpecies object — metaRangeSpecies","text":"metaRangeSpecies$new() metaRangeSpecies$print()","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"metaRangeSpecies object — metaRangeSpecies","text":"Creates new metaRangeSpecies object","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"metaRangeSpecies$new(name, sim)"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaRangeSpecies object — metaRangeSpecies","text":"name <string> name ID species. sim <metaRangeSimulation> reference metaRangeSimulation simulation object species part . Useful access environmental data data species.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSpecies object — metaRangeSpecies","text":"<metaRangeSpecies> object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"# The following is bad practice, since species should be added to a simulation # via the add_species method of the simulation object. But for illustration # purposes: sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) test_sim <- metaRangeSimulation$new(source_environment = sim_env) sp <- metaRangeSpecies$new(name = \"species_01\", sim = test_sim) sp"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"metaRangeSpecies object — metaRangeSpecies","text":"Prints information species console","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"metaRangeSpecies$print()"},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"metaRangeSpecies object — metaRangeSpecies","text":"<invisible self>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/metaRangeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metaRangeSpecies object — metaRangeSpecies","text":"","code":"## ------------------------------------------------ ## Method `metaRangeSpecies$new` ## ------------------------------------------------  # The following is bad practice, since species should be added to a simulation # via the add_species method of the simulation object. But for illustration # purposes: sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) test_sim <- metaRangeSimulation$new(source_environment = sim_env) sp <- metaRangeSpecies$new(name = \"species_01\", sim = test_sim) sp #> Species:  species_01  #> processes:  #> NULL #> traits:  #> character(0)"},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Exponential kernel — negative_exponential_function","title":"Negative Exponential kernel — negative_exponential_function","text":"Negative Exponential kernel","code":""},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative Exponential kernel — negative_exponential_function","text":"","code":"negative_exponential_function(x, mean_dispersal_dist)"},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative Exponential kernel — negative_exponential_function","text":"x <numeric> distance probability calculated. mean_dispersal_dist <numeric> mean dispersal distance (>0)","code":""},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative Exponential kernel — negative_exponential_function","text":"<numeric> probability distance x.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Negative Exponential kernel — negative_exponential_function","text":"negative exponential kernel defined : $$f(x) = \\frac{1}{2 \\pi ^2} e^{-\\frac{x}{}}$$ \\(\\) mean dispersal distance divided 2.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Negative Exponential kernel — negative_exponential_function","text":"Nathan, R., Klein, E., Robledo-Arnuncio, J.J. Revilla, E. (2012) Dispersal kernels: review. : Dispersal Ecology Evolution pp. 187--210. (eds J. Clobert, M. Baguette, T.G. Benton J.M. Bullock), Oxford, UK: Oxford Academic, 2013. doi:10.1093/acprof:oso/9780199608898.003.0015","code":""},{"path":"https://metaRange.github.io/metaRange/reference/negative_exponential_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative Exponential kernel — negative_exponential_function","text":"","code":"negative_exponential_function(1, 1) #> [1] 0.08615712"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeEnvironment","title":"Plotting function — plot.metaRangeEnvironment","text":"Plots specified current environment metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeEnvironment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeEnvironment","text":"","code":"# S3 method for metaRangeEnvironment plot(x, env_name, col, as_timeseries = FALSE, main = NULL, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeEnvironment","text":"x <metaRangeEnvironment> metaRangeEnvironment object. env_name <string> name (sub) environment plot. col <character> colors use. Defaults grDevices::hcl.colors() n = 50 random palette. as_timeseries <logical> TRUE, plot mean layer (source) environment line graph time, FALSE plot (current) environment raster. main <string> optional title plot. labeled automatically NULL. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeEnvironment","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeEnvironment","text":"","code":"sim_env <- terra::sds(terra::rast(vals = rep(1:4, 4), nrow = 2, ncol = 2, nlyr = 4)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$environment$set_current(1) plot(test_sim$environment, \"env_01\")  plot(test_sim$environment, \"env_01\", as_timeseries = TRUE)"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeSimulation","title":"Plotting function — plot.metaRangeSimulation","text":"Plots specified element metaRangeSimulation object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeSimulation","text":"","code":"# S3 method for metaRangeSimulation plot(x, obj, name, col, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeSimulation","text":"x <metaRangeSimulation> metaRangeSimulation object. obj <string> either string environment name species. name <string> either name environment name species trait. col <character> colors use. Defaults grDevices::hcl.colors() n = 50 random palette. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeSimulation","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) plot(test_sim, \"environment\", \"env_01\")   test_sim$add_species(\"species_01\") test_sim$add_traits(\"species_01\", trait_01 = matrix(1, nrow = 2, ncol = 2)) plot(test_sim, \"species_01\", \"trait_01\")   test_sim$add_globals(\"global_01\" = 1:10) plot(test_sim, \"globals\", \"global_01\")"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.metaRangeSpecies","title":"Plotting function — plot.metaRangeSpecies","text":"Plots specified trait metaRangeSpecies object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.metaRangeSpecies","text":"","code":"# S3 method for metaRangeSpecies plot(x, trait_name, col, main = NULL, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.metaRangeSpecies","text":"x <metaRangeSpecies> metaRangeSpecies object. trait_name <string> name trait plot. col <character> colors use. Defaults grDevices::hcl.colors() n =50 random palette. main <string> optional title plot. labeled automatically NULL. ... additional arguments passed terra::plot base::plot.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.metaRangeSpecies","text":"<invisible NULL>.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/plot.metaRangeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.metaRangeSpecies","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(\"species_01\", trait_01 = matrix(1:4, nrow = 2, ncol = 2)) plot(test_sim$species_01, \"trait_01\")"},{"path":"https://metaRange.github.io/metaRange/reference/print.metaRangeVariableStorage.html","id":null,"dir":"Reference","previous_headings":"","what":"Print traits or globals — print.metaRangeVariableStorage","title":"Print traits or globals — print.metaRangeVariableStorage","text":"Print method species traits simulation globals.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/print.metaRangeVariableStorage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print traits or globals — print.metaRangeVariableStorage","text":"","code":"# S3 method for metaRangeVariableStorage print(x, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/print.metaRangeVariableStorage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print traits or globals — print.metaRangeVariableStorage","text":"x <metaRangeVariableStorage> object print. ... <> ignored.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/print.metaRangeVariableStorage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print traits or globals — print.metaRangeVariableStorage","text":"<invisible x>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/print.metaRangeVariableStorage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print traits or globals — print.metaRangeVariableStorage","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(species = \"species_01\", a = 1) print(test_sim$species_01$traits) #> a :  num [1:2, 1:2] 1 1 1 1 test_sim$add_globals(b = 2) print(test_sim$globals) #> b :  num 2"},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Ricker reproduction model — ricker_reproduction_model","title":"Ricker reproduction model — ricker_reproduction_model","text":"implementation \"classic\" Ricker reproduction model (Ricker, 1954).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ricker reproduction model — ricker_reproduction_model","text":"","code":"ricker_reproduction_model(abundance, reproduction_rate, carrying_capacity)"},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ricker reproduction model — ricker_reproduction_model","text":"abundance <numeric> vector (matrix) abundances. reproduction_rate <numeric> vector (matrix) reproduction rates. carrying_capacity <numeric> vector (matrix) carrying capacities.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ricker reproduction model — ricker_reproduction_model","text":"<numeric> vector (matrix) abundances.","code":""},{"path":[]},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"equation-","dir":"Reference","previous_headings":"","what":"Equation:","title":"Ricker reproduction model — ricker_reproduction_model","text":"$$abundance_{t+1} = abundance_t \\cdot e^{reproduction\\_rate \\cdot (1 - \\frac{abundance_t}{carrying\\_capacity})}$$ Note input equal size input abundance positive results make sense.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ricker reproduction model — ricker_reproduction_model","text":"Cabral, J.S. Schurr, F.M. (2010) Estimating demographic models range dynamics plant species. Global Ecology Biogeography, 19, 85--97. doi:10.1111/j.1466-8238.2009.00492.x Original model: Ricker, W.E. (1954) Stock recruitment. Journal Fisheries Research Board Canada, 11, 559--623. doi:10.1139/f54-039","code":""},{"path":"https://metaRange.github.io/metaRange/reference/ricker_reproduction_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ricker reproduction model — ricker_reproduction_model","text":"","code":"ricker_reproduction_model(     abundance = 10,     reproduction_rate = 0.25,     carrying_capacity = 100 ) #> [1] 12.52323 ricker_reproduction_model(     abundance = matrix(10, 10, 5),     reproduction_rate =  0.25,     carrying_capacity =  100 ) #>           [,1]     [,2]     [,3]     [,4]     [,5] #>  [1,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [2,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [3,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [4,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [5,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [6,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [7,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [8,] 12.52323 12.52323 12.52323 12.52323 12.52323 #>  [9,] 12.52323 12.52323 12.52323 12.52323 12.52323 #> [10,] 12.52323 12.52323 12.52323 12.52323 12.52323 ricker_reproduction_model(     abundance = matrix(10, 10, 5),     reproduction_rate =  matrix(seq(-0.5, 0.5, length.out = 25), 10, 5),     carrying_capacity =  matrix(100, 10, 5) ) #>           [,1]      [,2]      [,3]      [,4]     [,5] #>  [1,] 6.376282  9.277435 13.498588  7.691264 11.19072 #>  [2,] 6.619932  9.631944 14.014396  7.985162 11.61834 #>  [3,] 6.872893 10.000000 14.549914  8.290291 12.06230 #>  [4,] 7.135520 10.382120 15.105895  8.607080 12.52323 #>  [5,] 7.408182 10.778842 15.683122  8.935973 13.00176 #>  [6,] 7.691264 11.190723  6.376282  9.277435 13.49859 #>  [7,] 7.985162 11.618342  6.619932  9.631944 14.01440 #>  [8,] 8.290291 12.062302  6.872893 10.000000 14.54991 #>  [9,] 8.607080 12.523227  7.135520 10.382120 15.10590 #> [10,] 8.935973 13.001765  7.408182 10.778842 15.68312"},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Save function — save_species","title":"Save function — save_species","text":"Saves specified traits metaRangeSpecies object.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save function — save_species","text":"","code":"save_species(x, traits = NULL, prefix = NULL, path, overwrite = FALSE, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save function — save_species","text":"x <metaRangeSpecies> metaRangeSpecies object. traits <character> NULL character vector specifying trait save. NULL, traits saved. prefix <string> prefix file names NULL. path <string>path directory files saved. overwrite <boolean> overwrite existing files. ... additional arguments passed terra::writeRaster.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save function — save_species","text":"<invisible character> paths saved files.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save function — save_species","text":"generated file names form file.path(path, paste0(prefix, species_name, \"_\", trait_name, \".file_extension\")). trait matrix raster form, file extension .tif. Otherwise .csv. prefix optional mainly useful add time step file name, case trait saved multiple times simulation.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/save_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save function — save_species","text":"","code":"sim_env <- terra::sds(terra::rast(vals = 1, nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") test_sim$add_traits(     \"species_01\",     trait_01 = matrix(1, nrow = 2, ncol = 2),     trait_02 = matrix(2, nrow = 2, ncol = 2) )  file_prefix <- \"This_could_be_a_time_step\" directory_name <- tempdir()  res_path <- save_species(     test_sim$species_01,     traits = \"trait_01\",     prefix = file_prefix,     path = directory_name ) # the following should be TRUE # but might fail due to floating point errors (that's why we round the values) identical(     round(terra::as.matrix(terra::rast(res_path), wide = TRUE)),     round(test_sim$species_01$traits[[\"trait_01\"]]) ) #> [1] TRUE  # test overwrite res_path2 <- save_species(     test_sim$species_01,     traits = \"trait_01\",     prefix = file_prefix,     path = directory_name,     overwrite = TRUE ) stopifnot(identical(res_path, res_path2))  # Saving all traits res_path3 <- save_species(     test_sim$species_01,     prefix = basename(tempfile()),     path = directory_name ) res_path3 #> [1] \"C:\\\\Users\\\\srfall\\\\AppData\\\\Local\\\\Temp\\\\RtmpqgLlIx/file49405b55207cspecies_01_trait_01.tif\" #> [2] \"C:\\\\Users\\\\srfall\\\\AppData\\\\Local\\\\Temp\\\\RtmpqgLlIx/file49405b55207cspecies_01_trait_02.tif\" # cleanup unlink(c(res_path, res_path3)) stopifnot(all(!file.exists(res_path, res_path3)))"},{"path":"https://metaRange.github.io/metaRange/reference/set_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Set verbosity of metaRange simulation — set_verbosity","title":"Set verbosity of metaRange simulation — set_verbosity","text":"Just wrapper options(metaRange.verbose = [0 | 1 | 2]) documented. 0, metaRange functions print messages console. 1, metaRange functions print messages console. 2, metaRange functions print many messages console.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/set_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set verbosity of metaRange simulation — set_verbosity","text":"","code":"set_verbosity(verbose)"},{"path":"https://metaRange.github.io/metaRange/reference/set_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set verbosity of metaRange simulation — set_verbosity","text":"verbose <integer> message verbosity (see description).","code":""},{"path":"https://metaRange.github.io/metaRange/reference/set_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set verbosity of metaRange simulation — set_verbosity","text":"<invisible list> list previous verbosity setting.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/set_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set verbosity of metaRange simulation — set_verbosity","text":"","code":"set_verbosity(0) getOption(\"metaRange.verbose\") #> [1] 0"},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for metaRange simulation — summary.metaRangeSimulation","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"Print summary simulation console.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"","code":"# S3 method for metaRangeSimulation summary(object, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"object <metaRangeSimulation> metaRangeSimulation object summarize. ... <> ignored.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"<invisible NULL>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for metaRange simulation — summary.metaRangeSimulation","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") summary(test_sim) #> ID: simulation_884b5b1  #> Environment:  #> class       : SpatRasterDataset  #> subdatasets : 1  #> dimensions  : 2, 2 (nrow, ncol) #> nlyr        : 1  #> resolution  : 180, 90  (x, y) #> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84)  #> source(s)   : memory  #> names       : env_01  #> Time step layer mapping:  1  #> Current time step:  1  #> Seed:  326  #> Species: #>  species_01  #> Simulation level processes: #> NULL #> Gobal variables: #> NULL #> Queue: #> At process:  0 out of:  0  #> Remaining queue:  #> --- empty  #> Future (next time step) queue:  #> --- empty"},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for metaRange species — summary.metaRangeSpecies","title":"Summary for metaRange species — summary.metaRangeSpecies","text":"Summary metaRange species","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for metaRange species — summary.metaRangeSpecies","text":"","code":"# S3 method for metaRangeSpecies summary(object, ...)"},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for metaRange species — summary.metaRangeSpecies","text":"object <metaRangeSpecies> metaRangeSpecies object summarize. ... <> ignored.","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for metaRange species — summary.metaRangeSpecies","text":"<invisible NULL>","code":""},{"path":"https://metaRange.github.io/metaRange/reference/summary.metaRangeSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for metaRange species — summary.metaRangeSpecies","text":"","code":"sim_env <- terra::sds(terra::rast(nrow = 2, ncol = 2)) names(sim_env) <- \"env_01\" test_sim <- metaRangeSimulation$new(source_environment = sim_env) test_sim$add_species(\"species_01\") summary(test_sim$species_01) #> Species name:  species_01  #> Species processes:  #> list() #> Species traits:  #> NULL"},{"path":"https://metaRange.github.io/metaRange/news/index.html","id":"metarange-101","dir":"Changelog","previous_headings":"","what":"metaRange 1.0.1","title":"metaRange 1.0.1","text":"CRAN release: 2023-12-05 fix --bounds access calculate_suitability found CRANS’ ASAN / valgrind checks fix warning recycled values example","code":""},{"path":"https://metaRange.github.io/metaRange/news/index.html","id":"metarange-100","dir":"Changelog","previous_headings":"","what":"metaRange 1.0.0","title":"metaRange 1.0.0","text":"CRAN release: 2023-11-23 first release","code":""}]
